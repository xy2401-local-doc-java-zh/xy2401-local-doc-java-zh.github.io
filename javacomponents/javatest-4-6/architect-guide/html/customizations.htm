<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="Content-Script-Type" content="text/javascript" />
<title>Customization</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 1.0.24" />
<meta name="date" content="2014-08-01T11:38:1Z" />
<meta name="robots" content="noarchive" />
<meta name="doctitle" content="Customization" />
<meta name="relnum" content="JavaTest Harness 4.6" />
<meta name="partnum" content="E20663-04" />
<link rel="copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />
<link rel="stylesheet" href="../../dcommon/css/blafdoc.css" title="Oracle BLAFDoc" type="text/css" />
<link rel="contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="index" href="index.htm" title="Index" type="text/html" />
<link rel="prev" href="junit.htm" title="Previous" type="text/html" />
<link rel="next" href="stdcmds.htm" title="Next" type="text/html" />
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<div class="header"><a id="top" name="top"></a>
<div class="zz-skip-header"><a href="#BEGIN">Skip Headers</a></div>
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="100%">
<tr>
<td align="left" valign="top"><b>JavaTest Harness Architect's Guide,</b><br />
<b>JavaTest Harness 4.6 for the Java Platform</b><br />
E20663-04</td>
<td valign="bottom" align="right">
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="225">
<tr>
<td>&nbsp;</td>
<td align="center" valign="top"><a href="toc.htm"><img src="../../dcommon/gifs/toc.gif" alt="Go To Table Of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td align="center" valign="top"><a href="index.htm"><img src="../../dcommon/gifs/index.gif" alt="Go To Index" /><br />
<span class="icon">Index</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
<hr />
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="100">
<tr>
<td align="center"><a href="junit.htm"><img src="../../dcommon/gifs/leftnav.gif" alt="Previous" /><br />
<span class="icon">Previous</span></a>&nbsp;</td>
<td align="center"><a href="stdcmds.htm"><img src="../../dcommon/gifs/rightnav.gif" alt="Next" /><br />
<span class="icon">Next</span></a></td>
<td>&nbsp;</td>
</tr>
</table>
<a name="BEGIN" id="BEGIN"></a></div>
<!-- class="header" -->
<div class="ind"><!-- End Header --><a id="CEHIIBED" name="CEHIIBED"></a>
<h1 class="chapter"><span class="secnum">13</span> Customization</h1>
<p>This chapter describes customizations that can be made in the JavaTest harness appearance and function. Customizations not documented in this guide are described in the appropriate Javadoc tool (API) documentation.</p>
<p>While most of this guide describes customization, this chapter describes advanced customization beyond that usually required to configure and execute a test suite. In this chapter, topics discussed include:</p>
<ul>
<li>
<p><a href="#CEHEFAFC">Customization API</a></p>
</li>
<li>
<p><a href="#CGFCGBGH">Internationalization</a></p>
</li>
<li>
<p><a href="#CEHGAHIF">Customizing the Splash Screen</a></p>
</li>
<li>
<p><a href="#CEHCGFJF">Customizing Menus</a></p>
</li>
<li>
<p><a href="#CEHIEIBE">Customizing Toolbars</a></p>
</li>
</ul>
<p>For architects, this chapter is most useful either after you have developed a basic version of a test suite and want to customize harness capabilities or as an overview to see exactly how much of the harness can be customized.</p>
<a id="CEHEFAFC" name="CEHEFAFC"></a>
<div class="sect1">
<h2 class="sect1">Customization API</h2>
<p>Several sections in this chapter refer to methods present in the ContextManager API with many of the harness customization features described in this chapter controlled by the <code>ContextManager</code> class (<code>com.sun.javatest.exec.ContextManager</code>). The harness queries this class to determine if a particular feature is enabled and if it is necessary for the supporting classes or objects to realize the customization.</p>
<p>An architect can create a single custom <code>ContextManager</code> implementation class for their test suite and override any methods as needed. The only thing required inside a custom implementation of <code>MyContextManager</code> is overriding the appropriate methods for the customized features. No additional implementation is required beyond that provided by the base class. The base class is not abstract and the default implementation provides the default behavior intended for the harness.</p>
<p>Architects then provide the custom <code>ContextManager</code> class to the harness by adding a value as part of the <code>TestSuite</code> properties (see <code>TestSuite.getTestSuiteInfo(String)</code>). The property name that should be provided is <code>tmcontext</code>. This can be done programmatically in the <code>TestSuite</code> class, but is more easily accomplished by placing the value in the <code>testsuite.jtt</code> file (see <a href="testsuite.htm#BBJJGDAD">Chapter 8</a>) of the test suite. For example:</p>
<p><code>tmcontext=com.</code>yourdomain<code>.jtharness.MyContextManager</code></p>
<p>That class should be available to the harness in the classpath value that is also provided in the <code>testsuite.jtt</code> file. See <a href="testsuite.htm#BBJJGDAD">Chapter 8</a> for more information about this file.</p>
<div align="center">
<div class="inftblnote"><br />
<table class="Note oac_no_warn" summary="" border="1" width="80%" frame="hsides" rules="groups" cellpadding="3" cellspacing="0">
<tbody>
<tr>
<td align="left">
<p class="notep1">Note:</p>
<p>The <code>classpath</code> value in <code>testsuite.jtt</code> is a space separated value.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblnote" --></div>
</div>
<!-- class="sect1" -->
<a id="CGFCGBGH" name="CGFCGBGH"></a>
<div class="sect1">
<h2 class="sect1">Internationalization</h2>
<p>Many harness APIs refer to resource bundles (<code>java.util.ResourceBundle</code>) and String keys instead of raw strings for presentation. For example, in the <code>JavaTestToolBar</code> API the default implementation of <code>getName()</code> and <code>getDescription()</code> make it easier to provide a resource bundle instead of overriding the methods. The API documentation for <code>JavaTestToolBar.getDescription()</code> states:</p>
<pre xml:space="preserve" class="oac_no_warn">
Get the long description of this toolbar's purpose.
May be multiple sentences if desired. This is automatically
retrieved from the supplied resource bundle by combining it with 
the toolbar ID with getID(()), e.g. it will try to retrieve 
getId().tb.desc from the resource bundle.
</pre>
<p>In the custom code that the test suite provides, there will be a line of code which creates the toolbar, <code>JavaTestToolBar</code>. The constructors for that class require passing a <code>ResourceBundle</code> and a <code>String</code> key.</p>
<pre xml:space="preserve" class="oac_no_warn">
public JavaTestToolBar(ResourceBundle bundle, String resourceID)
</pre>
<p>Assuming that the code creating the toolbar (provided by the test suite) is in package <code>foo.bar</code> and is called <code>MyContextManager</code>, it is common in the harness to write code similar to the following example:</p>
<pre xml:space="preserve" class="oac_no_warn">
package foo.bar;
import com.sun.javatest.util.I18NResourceBundle;
class MyContextManager extends ContextManager {
    ... {
       toolbar = new JavaTestToolBar(i18n, "mytoolbar");
    }
    private static I18NResourceBundle i18n =
        I18NResourceBundle.getBundleForClass(MyContextManager.class);
}
</pre>
<p>This <code>i18n</code> object can then be reused throughout the lifetime of that custom context manager for any necessary purpose. In this case it is passed to the toolbar being customized.</p>
<p>Continuing with the code example and how <code>JavaTestToolBar</code> would use it, when <code>getDescription()</code> on that toolbar object is called by the harness, it attempts to retrieve <code>getId().tb.desc</code> from the resource bundle. In the example, the harness loads the string named <code>mytoolbar.tb.desc</code> from the file (on the classpath) <code>foo/bar/i18n.properties</code>. The content of <code>foo/bar/i18n.properties</code> might be:</p>
<pre xml:space="preserve" class="oac_no_warn">
# i18n file for package foo.bar
mytoolbar.tb.desc=This is my great toolbar for you to use.
mytoolbar.tb.name=My Tools
</pre>
<p>It is typical to provide each package with its own <code>i18n.properties</code> file and then use a single instance of <code>I18NResourceBundle</code> object within that package, passing it around as needed. See the <code>java.util.ResourceBundle</code> API documentation for more information about how it automatically resolves the name of the resource file to load and for the format of the entries in the bundle.</p>
</div>
<!-- class="sect1" -->
<a id="CEHGAHIF" name="CEHGAHIF"></a>
<div class="sect1">
<h2 class="sect1">Customizing the Splash Screen</h2>
<p>Instead of using the default JavaTest harness splash screen, architects can insert a custom test suite <a id="sthref363" name="sthref363"></a>splash screen for users.</p>
<p>To use a <a id="sthref364" name="sthref364"></a>custom splash screen, test suite architects must accomplish the following actions:</p>
<ul>
<li>
<p>Insert a <a id="sthref365" name="sthref365"></a><code>splash.properties</code> file that specifies the custom splash image in the test suite <code>lib/</code> directory (below <code>javatest.jtt</code>).</p>
<p>Refer to <a href="#CEHBAACF">Example of <code>splash.properties</code> File</a>" for the content and format of a <code>splash.properties</code> file.</p>
</li>
<li>
<p>Insert the splash image file in a location relative to the <code>splash.properties</code> file.</p>
<p>Acceptable image formats for the splash screen are <code>GIF</code>, <code>JPEG</code> and <code>PNG</code>.</p>
</li>
</ul>
<p>Once the <code>splash.properties</code> and the splash image files are integrated in the test suite <code>lib/</code> directory, the JavaTest harness will display the custom splash screen instead of the default when starting.</p>
<p>In the current implementation, the JavaTest harness displays the custom splash screen when users start the harness with <a id="sthref366" name="sthref366"></a><code>-ts</code> or <a id="sthref367" name="sthref367"></a><code>-testsuite</code> flags to specify the specific test suite. In the future additional flags might be used to start the harness with the custom splash screen.</p>
<a id="CEHBAACF" name="CEHBAACF"></a>
<div class="sect2">
<h3 class="sect2">Example of <code>splash.properties</code> File</h3>
<p>The following is an example of the required format of the splash.properties file. In this example, the custom image name is <code>splashMyProduct.gif</code>.</p>
<pre xml:space="preserve" class="oac_no_warn">
# comment
splash.icon=splashMyProduct.gif
</pre></div>
<!-- class="sect2" -->
<a id="Z40036541008794" name="Z40036541008794"></a>
<div class="sect2">
<h3 class="sect2">Notes About the Implementation</h3>
<p>Because the splash screen must be capable of being internationalized, the <code>testsuite.jtt</code> file is not used to directly specify the splash screen. This capability of being internationalized requires that it should go through the standard ResourceBundle searching. The standard ResourceBundle searching is facilitated by using the <code>splash.properties</code> file. Other options for specifying the custom splash screen were not utilized because they increase the startup overhead of the harness by requiring it to perform additional file operations.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CEHCGFJF" name="CEHCGFJF"></a>
<div class="sect1">
<h2 class="sect1">Customizing Menus</h2>
<p>Test suite architects can customize the GUI menus in the Test Manager (ExecTool) by using the API provided by the harness. Common uses of this customization are to turn on and off frequently used test suite options or to trigger customized informational dialogs. The API provides limited access to the menu structure of the Test Manager, but relatively unlimited capabilities for the menu items themselves (such as the ability to insert multi-level menus, enable or disable a menu item, or provide a checkbox menu item). In addition, the popup menu available on the main test tree can also be customized.</p>
<a id="Z40036541008801" name="Z40036541008801"></a>
<div class="sect2">
<h3 class="sect2">Adding Menu Items to Test Manager Menus</h3>
<p>Menu additions are managed by the JavaTestMenuManager (<code>com.sun.javatest.exec.JavaTestMenuManager</code>) provided by the ContextManager (<code>com.sun.javatest.exec.ContextManager</code>). The menu manager class provides an abstract class for the architect to populate. The most important part of the class are the set of constants that it defines. These constants define a set of logical positions within the Test Manager's menu structure. Instead of allowing the architect to determine the exact position of the menu items, which makes it virtually impossible to make future harness menu changes, the API defines the logical positioning with which the harness will determine the final position of a custom menu item.</p>
<p>The constants take the form of &lt;<span class="italic">logical menu</span>&gt;_&lt;<span class="italic">logical position</span>&gt;, such as HELP_ABOUT. If the architect wanted to add a menu item labeled About My Test Suite, they would use the HELP_ABOUT menu position. In the same manner, for the FILE_OTHER position, the architect would use file related label or a related label that logically belongs in a location on the File menu.</p>
<p>See the JavaTestMenuManager API documentation provided by the harness for detailed implementation information.</p>
</div>
<!-- class="sect2" -->
<a id="Z40036541008811" name="Z40036541008811"></a>
<div class="sect2">
<h3 class="sect2">Adding Menu Items to the Tree Popup Menu</h3>
<p>Similar to customizing the main Test Manager menus, the ContextManager must provide a class to manage the popup menu items. However, unlike the JavaTestMenuManager, it does not manage the position of items or serve as a container of multiple menus. Instead, JavaTestContextMenu represents a single menu item (in the Swing sense) that is activated on demand. The class manages the underlying JMenuItem and the rules for displaying that item.</p>
<div align="center">
<div class="inftblnote"><br />
<table class="Note oac_no_warn" summary="" border="1" width="80%" frame="hsides" rules="groups" cellpadding="3" cellspacing="0">
<tbody>
<tr>
<td align="left">
<p class="notep1">Note:</p>
<p>This class assumes that the context menu is displayed in the context of a test folder or single test (such as a folder in the test tree or a test in the test tree). It cannot be used to insert context menus at other locations within the harness GUI and the availability of the custom menu items is limited to certain locations.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblnote" --></div>
<p>The most important considerations for this class are the rules for deciding whether or not to display the tree popup menu:</p>
<p>1) Is this menu item applicable to test entities, folders, or both?</p>
<p>2) Is the item applicable for cases in which multiple items (multiple tests for example) are selected?</p>
<p>For example, by using these rules, an architect can create popup menu items that appear only on tests, such as a menu item that says Configure Test. An architect can also create a menu item, such as Delete, that acts on homogeneous selection sets.</p>
<p>See the <code>JavaTestContextMenu</code> API documentation provided by the harness for more details.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CEHIEIBE" name="CEHIEIBE"></a>
<div class="sect1">
<h2 class="sect1">Customizing Toolbars</h2>
<p>The architect can add custom toolbars to the Test Manager, which are combined with the toolbars provided by the harness. The harness provides a default toolbar manager (<code>com.sun.javatest.exec.ToolBarManager</code>) which is suitable for most uses. Using either the default context manager or preferably a custom <code>ContextManager</code> (see <a href="#CEHEFAFC">Customization API</a>), the toolbar manager is retrieved through the <code>getToolBarManager()</code> method. The API on this object allows the test suite to add and remove toolbars of the type <code>com.sun.javatest.exec.JavaTestToolBar</code>, which is a subclass of Swing's JToolBar.</p>
<p>On the <code>JavaTestToolBar</code> API, methods are provided that enable the harness to query the toolbar for its name, description and optional behavior. These methods enable the harness to automatically manage the toolbar, especially in the case of presenting menus which control visibility. Architects should pay attention to the internationalization practices that the harness enforces (see <a href="#CGFCGBGH">Internationalization</a>). See the API documentation for <code>JavaTestToolBar</code> methods <code>getId()</code>, <code>getDescription()</code>, and <code>getName()</code>.</p>
</div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
<div class="footer">
<hr />
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="100%">
<col width="33%" />
<col width="*" />
<col width="33%" />
<tr>
<td valign="bottom">
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="100">
<col width="*" />
<col width="48%" />
<col width="48%" />
<tr>
<td>&nbsp;</td>
<td align="center"><a href="junit.htm"><img src="../../dcommon/gifs/leftnav.gif" alt="Previous" /><br />
<span class="icon">Previous</span></a>&nbsp;</td>
<td align="center"><a href="stdcmds.htm"><img src="../../dcommon/gifs/rightnav.gif" alt="Next" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="copyrightlogo"><img class="copyrightlogo" src="../../dcommon/gifs/oracle.gif" alt="Oracle Logo" /><br />
<span class="copyrightlogo">Copyright&nbsp;&copy;&nbsp;2002, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.</span> <a href="../../dcommon/html/cpyr.htm"><br />
<span class="copyrightlogo">Legal Notices</span></a></td>
<td valign="bottom" align="right">
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="225">
<tr>
<td>&nbsp;</td>
<td align="center" valign="top"><a href="toc.htm"><img src="../../dcommon/gifs/toc.gif" alt="Go To Table Of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td align="center" valign="top"><a href="index.htm"><img src="../../dcommon/gifs/index.gif" alt="Go To Index" /><br />
<span class="icon">Index</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
</div>
<!-- class="footer" -->
</body>
</html>
