<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="Content-Script-Type" content="text/javascript" />
<title>Running JUnit Tests</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 1.0.24" />
<meta name="date" content="2014-08-01T11:38:1Z" />
<meta name="robots" content="noarchive" />
<meta name="doctitle" content="Running JUnit Tests" />
<meta name="relnum" content="JavaTest Harness 4.6" />
<meta name="partnum" content="E20663-04" />
<link rel="copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />
<link rel="stylesheet" href="../../dcommon/css/blafdoc.css" title="Oracle BLAFDoc" type="text/css" />
<link rel="contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="index" href="index.htm" title="Index" type="text/html" />
<link rel="prev" href="servicemanagement.htm" title="Previous" type="text/html" />
<link rel="next" href="customizations.htm" title="Next" type="text/html" />
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<div class="header"><a id="top" name="top"></a>
<div class="zz-skip-header"><a href="#BEGIN">Skip Headers</a></div>
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="100%">
<tr>
<td align="left" valign="top"><b>JavaTest Harness Architect's Guide,</b><br />
<b>JavaTest Harness 4.6 for the Java Platform</b><br />
E20663-04</td>
<td valign="bottom" align="right">
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="225">
<tr>
<td>&nbsp;</td>
<td align="center" valign="top"><a href="toc.htm"><img src="../../dcommon/gifs/toc.gif" alt="Go To Table Of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td align="center" valign="top"><a href="index.htm"><img src="../../dcommon/gifs/index.gif" alt="Go To Index" /><br />
<span class="icon">Index</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
<hr />
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="100">
<tr>
<td align="center"><a href="servicemanagement.htm"><img src="../../dcommon/gifs/leftnav.gif" alt="Previous" /><br />
<span class="icon">Previous</span></a>&nbsp;</td>
<td align="center"><a href="customizations.htm"><img src="../../dcommon/gifs/rightnav.gif" alt="Next" /><br />
<span class="icon">Next</span></a></td>
<td>&nbsp;</td>
</tr>
</table>
<a name="BEGIN" id="BEGIN"></a></div>
<!-- class="header" -->
<div class="ind"><!-- End Header --><a id="BBJJDGBB" name="BBJJDGBB"></a>
<h1 class="chapter"><span class="secnum">12</span> Running JUnit Tests</h1>
<p>This chapter explains how to retrofit existing JUnit 3.x or 4.x test suites to enable them to run with JavaTest Harness. This information can also help you author new <a id="sthref324" name="sthref324"></a>JUnit tests that run under the harness.</p>
<p>JUnit is a simple framework for writing and running automated tests. Written by Erich Gamma and Kent Beck in 1997, JUnit exposed test driven development practices from the <a id="sthref325" name="sthref325"></a>Smalltalk world into the Java programming community. JUnit is now an open-source project at <a id="sthref326" name="sthref326"></a>SourceForge.net (<a href="http://sourceforge.net/projects/junit"><code>http://sourceforge.net/projects/junit</code></a>).</p>
<p>The <a id="sthref327" name="sthref327"></a>JUnit framework provides a fast, simple interface for creating a set of tests and executing them by a common method (for example, using Ant or a shell script). The framework places very few restrictions on what the tester must do to write a test class. The core <a id="sthref328" name="sthref328"></a>JUnit distribution has few facilities for GUI interaction or reporting, and it has no robust interface for configuration.</p>
<p>The procedure described here enables JUnit tests to be run under the name="ProductName" content="JavaTest Harness"?&gt; harness. The name="ProductName" content="JavaTest Harness"?&gt; harness provides a robust GUI interface, many reporting options, and an opportunity to build a robust configuration system for the tests. The harness can be configured to allow customization of the GUI, report types, result presentation, and more. These services might be useful for users who want to wrap more powerful facilities around their existing test infrastructure.</p>
<a id="Z40036501006151" name="Z40036501006151"></a>
<div class="sect1">
<h2 class="sect1">The Retrofit Process</h2>
<p>This section describes the process of <a id="sthref329" name="sthref329"></a>retrofitting JUnit tests so that they run on the name="ProductName" content="JavaTest Harness"?&gt; harness.</p>
<a id="Z40036501005929" name="Z40036501005929"></a>
<div class="sect2">
<h3 class="sect2">Prerequisites for Converting Tests</h3>
<p>To undertake a conversion process, you must be familiar with some of the inner workings of the <a id="sthref330" name="sthref330"></a>JUnit test suite you are converting. Specifically, you need to know:</p>
<ul>
<li>
<p>How the JUnit tests can be distinguished from other tests.</p>
</li>
<li>
<p>The version of JUnit that works with the test suite (3.x or 4.x).</p>
</li>
<li>
<p>Where the tests are stored. For example, are they in a single directory tree?</p>
</li>
<li>
<p>The libraries or supporting processes required to run the tests.</p>
</li>
<li>
<p>The configuration settings or files necessary to run the tests.</p>
</li>
</ul>
<p>Tests written to work with <a id="sthref331" name="sthref331"></a>JUnit 3.x are typically identified as being a subclass of <a id="sthref332" name="sthref332"></a><code>junit.framework.TestCase</code>. To find JUnit 3.x tests, use the c<a id="sthref333" name="sthref333"></a><code>om.sun.javatest.junit.JUnitSuperTestFinder</code> class (located in the <a id="sthref334" name="sthref334"></a><code>jt-junit.jar</code> archive) to scan the test classes. Each class that is a subclass of <code>junit.framework.TestCase</code> is designated as a recognized test.</p>
<p><a id="sthref335" name="sthref335"></a>JUnit 4.x style tests do not use a specific superclass, rather, they tag classes with the <a id="sthref336" name="sthref336"></a><code>org.junit.Test</code> annotation. The name="ProductName" content="JavaTest Harness"?&gt; harness library <a id="sthref337" name="sthref337"></a><code>jt-junit.jar</code> provides the class <a id="sthref338" name="sthref338"></a><code>com.sun.javatest.junit.JUnitAnnotationTestFinder</code> to find 4.x style tests. It operates much like the <a id="sthref339" name="sthref339"></a><code>JUnitSuperTestFinder</code> class, but looks for different criteria.</p>
<p>See <a href="#BBJHCDEB">JUnitSuperTestFinder</a> and <a href="#BBJFBBFE">JUnitAnnotationTestFinder</a> for more details.</p>
<a id="Z40036501005801" name="Z40036501005801"></a>
<div class="sect3">
<h4 class="sect3">Procedure for Converting Tests</h4>
<p>This procedure describes how to set up files, property settings, and configuration settings before running a JUnit test.</p>
<ol>
<li><a id="BBJBABGH" name="BBJBABGH"></a>
<p>Create a <code>testsuite.jtt</code> file in root of the product directory.</p>
<p>For example, if the product unpacks into directory <code>foo/</code>, the <code>testsuite.jtt</code> file should be in that directory. It does not necessarily need to be co-located with the tests.</p>
<p>The <code>.jtt</code> file is a properties formatted file, with <code>key=value</code> pairs on each line. Setting the <code>name</code> and <code>id</code><a id="sthref340" name="sthref340"></a> keys is mandatory. The <code>name</code> is a short descriptive name for your test suite, the <code>id</code> is an internal key used identify this test suite.</p>
</li>
<li><a id="BBJHIEAC" name="BBJHIEAC"></a>
<p>Select your method for scanning for tests by specifying a <code>TestFinder</code> class.</p>
<p>The line for specifying the <code>TestFinder</code> class looks like this:</p>
<pre xml:space="preserve" class="oac_no_warn">
<code>finder = com.sun.javatest.junit.JUnitSuperTestFinder</code> 
<code>      -superclass junit.framework.TestCase</code>
</pre>
<p>See <a href="#BBJFBBFE">JUnitAnnotationTestFinder</a> and <a href="#BBJFBBFE">JUnitAnnotationTestFinder</a> for further information.</p>
</li>
<li><a id="Z40036501005687" name="Z40036501005687"></a>
<p>Select your <code>TestSuite</code> class, using <code>com.sun.javatest.junit.JUnitTestSuite</code> if you do not subclass it.</p>
<p>Use a fully qualified class name. This class must be available on the system class path, preferably on the class path defined in your <code>.jtt</code> file. For example:</p>
<pre xml:space="preserve" class="oac_no_warn">
<code>testsuite = com.sun.javatest.junit.JUnitTestSuite</code>
</pre></li>
<li><a id="Z40036501005696" name="Z40036501005696"></a>
<p>Specify the interview.</p>
<p>If you don't have your own interview, use the line below as the default. This class must be available on the system class path, preferably on the class path setting in your <code>.jtt</code> file. For example:<a id="sthref341" name="sthref341"></a></p>
<pre xml:space="preserve" class="oac_no_warn">
<code>interview = com.sun.javatest.junit.JUnitBaseInterview</code>
</pre></li>
<li><a id="Z40036501005704" name="Z40036501005704"></a>
<p>Provide a <code>tests</code> setting.</p>
<p>The tests location is important because it is forwarded to the <code>TestFinder</code> class you specified in Step <a href="#BBJHIEAC">2</a>. This location is often relative to the location of the <code>testsuite.jtt</code> file as described in Step <a href="#BBJHIEAC">2</a>. Use forward slashes to make the path platform independent. Do not use absolute paths or relative paths to places above <code>testsuite.jtt</code>. One of the following lines might serve as an example:</p>
<ul>
<li>
<p>If you are scanning <code>.java</code> files, they might be located below the <code>tests/</code> directory.</p>
<pre xml:space="preserve" class="oac_no_warn">
<code>tests = tests</code>
</pre></li>
<li>
<p>If you are scanning class files, they might be located below the <code>classes/</code> directory:</p>
<pre xml:space="preserve" class="oac_no_warn">
<code>tests = classes</code> 
</pre></li>
</ul>
<p>See <a href="#BBJHCDEB">JUnitSuperTestFinder</a> and <a href="#BBJFBBFE">JUnitAnnotationTestFinder</a> for further information.</p>
</li>
<li><a id="Z40036501005724" name="Z40036501005724"></a>
<p>Make sure that the paths to any classes you specify in the <code>testsuite.jtt</code> file are assigned to the <code>classpath</code> key in the <code>testsuite.jtt</code> file.</p>
<p>This how the harness locates the classes. For example, if you specify:</p>
<pre xml:space="preserve" class="oac_no_warn">
<code>interview = com.sun.javatest.junit.JUnitBaseInterview</code>
</pre>
<p>be sure to add the path to the JAR file that contains that class to the <code>classpath</code> key as shown here:</p>
<pre xml:space="preserve" class="oac_no_warn">
<code>classpath = lib/jt-junit.jar lib/jt-myts.jar</code>
</pre></li>
<li><a id="Z40036501005734" name="Z40036501005734"></a>
<p>Try running the harness to see if it finds your tests.</p>
<p>You have to decide how to arrange your (JAR) files and resolve paths. The general form is:</p>
<pre xml:space="preserve" class="oac_no_warn">
&gt; <code>cd mytestsuite/</code>
</pre>
<pre xml:space="preserve" class="oac_no_warn">
&gt; <code>java -jar lib/javatest.jar -ts .</code>
</pre>
<p>This starts the harness and forces it to load the test suite located in the current directory (represented by "."). The <code>testsuite.jtt</code> file must be located in the "." directory.</p>
<p>When the main window comes up, you should see a tree populated with the tests you intended. Check the counters on the main panel to view a summary of the tests that were found. You can check the View &gt; Properties menu item to verify that the plug-in classes are loaded as you expect.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="Z40036501006237" name="Z40036501006237"></a>
<div class="sect1">
<h2 class="sect1">Technical Details</h2>
<p>This section describes the two main sets of classes that provide JUnit support. The first is the <a id="sthref342" name="sthref342"></a><code>JUnitTestFinder</code> (a subclass of <code>com.sun.javatest.TestFinder</code>). Variations of the <code>JUnitTestFinder</code>, <a id="sthref343" name="sthref343"></a><code>JUnitSuperTestFinder</code> and <a id="sthref344" name="sthref344"></a><code>JUnitAnnotationTestFinder</code> classes roughly correspond to JUnit 3.x and 4.x support. The difference is explained below.</p>
<p>The second supporting component is the <a id="sthref345" name="sthref345"></a><code>JUnitMultiTest</code> class that is responsible for executing the tests.</p>
<a id="Z40036501006013" name="Z40036501006013"></a>
<div class="sect2">
<h3 class="sect2">Support Classes</h3>
<p>The following additional "glue" classes are provided to connect everything: <a id="sthref346" name="sthref346"></a><code>JUnitTestSuite</code>, <a id="sthref347" name="sthref347"></a><code>JUnitBaseInterview</code>, and <a id="sthref348" name="sthref348"></a><code>JUnitTestRunner</code>. Each supporting class is explained below.</p>
<ul>
<li>
<p>The <code>JUnitTestSuite</code> class is a very simple class that instructs the harness to use the <code>JUnitTestRunner</code> to execute tests. If this method is not present, the <code>DefaultTestRunner</code> is used. This is the traditional way to execute tests requiring a <code>Script</code> class. Because the <code>TestRunner</code> class is present, there is full control over how the tests are executed. For example, the harness can determine how many tests are run simultaneously and how they are launched (for example, using <code>exec</code>). By extending this class, you have access to override other aspects of the harness. See the <code>TestRunner</code> API for more information. Note that many of the settings that this document describes in the <code>testsuite.jtt</code> file can be hard coded into the <code>TestSuite</code> subclass. The <code>TestSuite</code> base class provides the functionality to instantiate the settings in the <code>testsuite.jtt</code>.</p>
</li>
<li>
<p>The <code>JUnitBaseInterview</code> class is a skeleton interview class that does not require any input from the user. If your JUnit tests do not require a setting from the user, do not modify it. Try one of the following methods to get values from the user:</p>
<ul>
<li>
<p>Read a configuration file from a pre-determined location, perhaps a location relative to the test suite root (<code>TestSuite.getRootDir()</code>).</p>
</li>
<li>
<p>Ask the user for the values directly using the <code>com.sun.interview</code> API. This is the primary means by which the harness is designed to get values from the user. In either case, the value(s) must end up in the <code>Map</code> provided in <code>Interview.export(Map)</code>. The <code>Map</code> is the set of values that the other classes must have access to, namely the <code>JUnitTestRunner</code> and classes it creates (<code>JUnitMultiTest</code>). Read <a href="interview.htm#BBJGIBFG">Chapter 6</a> for more information.</p>
</li>
</ul>
</li>
<li>
<p>The <code>JUnitTestRunner</code> class is responsible for dispatching tests. It has access, via an <code>Iterator</code>, to the entire list of tests to be executed during a test run. Because a test is represented by a <code>TestDescription</code>, you must customize your test finder to add any settings that you will want later (in this class). The default implementation executes the test using <code>JUnitBareMultiTest</code> if the <code>TestDescription</code> property <code>junit.finderscantype</code> is set to <code>superclass</code>. If it is not set to <code>superclass</code>, it uses the <code>JUnitAnnotationMultiTest</code>class. You may want to change this behavior, use your own <code>JUnitMultiTest</code> class, or a subclass of one of these.</p>
</li>
</ul>
<a id="BBJHCDEB" name="BBJHCDEB"></a>
<div class="sect3">
<h4 class="sect3">JUnitSuperTestFinder</h4>
<p>This class looks for a superclass that identifies the class as a JUnit test. By default it searches the ancestors of each class for <a id="sthref349" name="sthref349"></a><code>junit.framework.TestCase</code>. Because a test suite might require further derivations of <code>junit.framework.TestCase</code> to support its particular needs, you can use the <code>-superclass</code> option to specify a more specific class.</p>
<p>For example, consider the following class structure:</p>
<pre xml:space="preserve" class="oac_no_warn">
java.lang.Object
   junit.framework.TestCase
      foo.BetterTestCase
         product.Test0002a
</pre>
<p><code>Test0002a</code> is a subclass of <code>BetterTestCase</code>, and so forth.</p>
<ul>
<li>
<p>If given <code>Test0002a</code>, <code>JUnitSuperFinder</code> ascends the inheritance chain until it reaches either a matching superclass or <code>java.lang.Object</code>. It searches for the <code>TestCase</code> class by default, so when given <code>Test0002a</code>, it ascends two levels, finds <code>java.lang.Object</code>, and returns <code>Test0002a</code> to the harness as a test.</p>
</li>
<li>
<p>If this test finder is given <code>java.util.ArrayList</code>, it ascends until it reaches <code>java.lang.Object</code>, at which point it decides that the class is not a test and moves on.</p>
</li>
</ul>
<p>To change the superclass for which you are scanning, supply the <code>-superclass</code> argument and specify a class name. You can supply this argument multiple times to scan for multiple superclasses. For example, in the <code>testsuite.jtt</code> file you might specify the following:</p>
<pre xml:space="preserve" class="oac_no_warn">
<code>finder = com.sun.javatest.junit.JUnitSuperTestFinder -superclass</code>
<code>         foo.BetterTestCase -superclass foo.CustomTestCase</code>
</pre>
<p>Although it does not execute tests, the test finder attempts to pick out test methods by looking for public methods that begin with the string "<code>test</code>". It then lists these in a space-separated list, without the parameters (just the method name). The list might contain duplicates because the full signature is not evaluated. Semantics for this <code>TestDescription</code> value are loosely defined at this point. Public comment is welcome (submit your comments to the JT harness interest forum at <code><a href="http://java.net/projects/jtharness">http://java.net/projects/jtharness</a></code>).</p>
<p>This superclass finder generates the <code>TestDescription</code> (<code>com.sun.javatest.TestDescription</code>) values shown in <a href="#BBJCAHJF">Table 12-1</a>.</p>
<div class="tblhruleformal"><a id="sthref350" name="sthref350"></a><a id="BBJCAHJF" name="BBJCAHJF"></a>
<p class="titleintable">Table 12-1 JUnitSuperTestFinder Test Description Values</p>
<table class="HRuleFormal" title="JUnitSuperTestFinder Test Description Values" summary="Add Summary attribute value here." dir="ltr" border="1" width="100%" frame="hsides" rules="rows" cellpadding="3" cellspacing="0">
<col width="43%" />
<col width="*" />
<thead>
<tr align="left" valign="top">
<th align="left" valign="bottom" id="r1c1-t2">Key</th>
<th align="left" valign="bottom" id="r1c2-t2">Value(s)</th>
</tr>
</thead>
<tbody>
<tr align="left" valign="top">
<td align="left" id="r2c1-t2" headers="r1c1-t2">
<p><a id="sthref351" name="sthref351"></a>keywords</p>
</td>
<td align="left" headers="r2c1-t2 r1c2-t2">
<p>junit, junit3</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r3c1-t2" headers="r1c1-t2">
<p><a id="sthref352" name="sthref352"></a><code>junit.finderscantype</code></p>
</td>
<td align="left" headers="r3c1-t2 r1c2-t2">
<p>superclass</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r4c1-t2" headers="r1c1-t2">
<p><a id="sthref353" name="sthref353"></a><code>junit.testmethods</code></p>
</td>
<td align="left" headers="r4c1-t2 r1c2-t2">
<p>(list of identified test methods)</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" --></div>
<!-- class="sect3" -->
<a id="BBJFBBFE" name="BBJFBBFE"></a>
<div class="sect3">
<h4 class="sect3">JUnitAnnotationTestFinder</h4>
<p>This annotation test finder scans classes for the <code>org.junit.Test</code> annotation. It uses the same scanning strategy as <code>JUnitSuperTestFinder</code>.</p>
<p>This annotation finder generates the <code>TestDescription</code> (<code>com.sun.javatest.TestDescription</code>) values shown in <a href="#BBJFDFFF">Table 12-2</a>.</p>
<div class="tblhruleformal"><a id="sthref354" name="sthref354"></a><a id="BBJFDFFF" name="BBJFDFFF"></a>
<p class="titleintable">Table 12-2 JUnitAnnotationTestFinder Test Description Values</p>
<table class="HRuleFormal" title="JUnitAnnotationTestFinder Test Description Values" summary="Add Summary attribute value here." dir="ltr" border="1" width="100%" frame="hsides" rules="rows" cellpadding="3" cellspacing="0">
<col width="35%" />
<col width="*" />
<thead>
<tr align="left" valign="top">
<th align="left" valign="bottom" id="r1c1-t3">Key</th>
<th align="left" valign="bottom" id="r1c2-t3">Value(s)</th>
</tr>
</thead>
<tbody>
<tr align="left" valign="top">
<td align="left" id="r2c1-t3" headers="r1c1-t3">
<p><a id="sthref355" name="sthref355"></a>keywords</p>
</td>
<td align="left" headers="r2c1-t3 r1c2-t3">
<p>junit, junit4</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r3c1-t3" headers="r1c1-t3">
<p><a id="sthref356" name="sthref356"></a>junit.finderscantype</p>
</td>
<td align="left" headers="r3c1-t3 r1c2-t3">
<p>annotation</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r4c1-t3" headers="r1c1-t3">
<p><a id="sthref357" name="sthref357"></a>junit.testmethods</p>
</td>
<td align="left" headers="r4c1-t3 r1c2-t3">
<p>(list of identified test methods)</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" --></div>
<!-- class="sect3" -->
<a id="Z40036501005910" name="Z40036501005910"></a>
<div class="sect3">
<h4 class="sect3">JUnitBareMultiTest</h4>
<p><a id="sthref358" name="sthref358"></a>This is the execution class for JUnit 3.x style tests. Execution is accomplished using the class name supplied by the test finder (through the <code>TestDescription</code>) which is used to execute that class's <code>TestCase.runBare()</code> method. This might not be sufficient for all test suites. Output from <code>stdout</code> and <code>stderr</code> are captured. The test passes if no exceptions are thrown and fails if there are any <code>Throwable</code> results.</p>
</div>
<!-- class="sect3" -->
<a id="Z40036501005921" name="Z40036501005921"></a>
<div class="sect3">
<h4 class="sect3">JUnitAnnotationMultiTest</h4>
<p><a id="sthref359" name="sthref359"></a>This is the execution class for JUnit 4.x style tests. It takes the class that was identified by the test finder and executes it using the <a id="sthref360" name="sthref360"></a>JUnit library <code>TestResult.Section</code> parts. Also, because execution is turned over to JUnit, it does not report any of its own debugging output during execution. (In the future, it would be useful to take more advantage of the Result API and any observer APIs that are available.)</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="Z40036501006112" name="Z40036501006112"></a>
<div class="sect2">
<h3 class="sect2">Implementation Notes</h3>
<p>The use of the <code>junit3</code> and <code>junit4</code> keywords might be a generalization, since it really represents how the class was found. A test suite might mix use of version 3 and 4 features, meaning it is not necessarily completely 4.x compliant. Nonetheless, perhaps being able to run 3.x style tests out of a mixed set (see <a id="sthref361" name="sthref361"></a><code>com.sun.javatest.finder.ChameleonTestFinder</code>) can be useful. Do not forget that the <a id="sthref362" name="sthref362"></a><code>junit</code> keyword is also added so that JUnit tests can be selected from among non-JUnit tests.</p>
<p>Two of the most likely changes you should make is to modify the test finder or modify how to execute the test. To change the test finder, simply subclass <code>JUnitTestFinder</code>, provide it on the class path in <code>testsuite.jtt</code> and change the finder setting in <code>testsuite.jtt</code>.</p>
<p>To change the method for executing a test, you must change how it is dispatched in <code>JUnitTestRunner</code>. To change that, you must subclass <code>JUnitTestRunner</code> and provide it on the <code>testsuite.jtt</code> class path. You must also subclass <code>JUnitTestSuite</code> and change its setting in <code>testsuite.jtt</code> (see <a href="testsuite.htm#Z40036421005407">The testsuite.jtt File</a>).</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BBJGCADG" name="BBJGCADG"></a>
<div class="sect1">
<h2 class="sect1">Areas for Improvement</h2>
<p>This section lists implementation features that might benefit from user feedback and further development. You can provide this on the JT harness web site <a href="http://java.net/projects/jtharness"><code>http://java.net/projects/jtharness</code></a>.</p>
<ul>
<li>
<p>The use of class path is currently not convenient. The general design of the harness is that the setting in <code>testsuite.jtt</code> affects the tests, rather than the system class path that the harness uses. This area can be more refined.</p>
</li>
<li>
<p>Some additional base implementations of the interview class would be useful. In particular, providing one that reads a properties file and dumps it directly into the <code>Map</code> of <code>Interview.export(Map)</code> would provide a "quick and dirty" way for people to configure their test suites. Perhaps the location of the file can be written as a setting in <code>testsuite.jtt</code>.</p>
<div align="center">
<div class="inftblnote"><br />
<table class="Note oac_no_warn" summary="" border="1" width="80%" frame="hsides" rules="groups" cellpadding="3" cellspacing="0">
<tbody>
<tr>
<td align="left">
<p class="notep1">Note:</p>
<p>Users should generally not be instructed to alter <code>testsuite.jtt</code>. These settings are designed to be static. Information the user provides should be gathered through the interview system. As an architect, you should configure the <code>testsuite.jtt</code> file for general use during the retrofit process. Once the conversion is completed, the file should remain relatively untouched.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblnote" --></div>
</li>
<li>
<p>It might be useful to hard code the <code>Interview</code> class and accept an override in the <code>testsuite.jtt</code> file, rather than forcing the developer to specify it in the file as documented above. This also applies to the <code>JUnitTestRunner</code> (or just the <code>TestRunner</code> class) in the implementation of <code>JUnitTestSuite</code>.</p>
</li>
</ul>
<a id="Z40036501006135" name="Z40036501006135"></a>
<div class="sect2">
<h3 class="sect2">References</h3>
<ul>
<li>
<p>JT Harness project at <a href="http://java.net/projects/jtharness"><code>http://java.net/projects/jtharness</code></a></p>
</li>
<li>
<p>JUnit project <a href="http://SourceForge.net/projects/junit"><code>http://SourceForge.net/projects/junit</code></a></p>
</li>
<li>
<p>JUnit 3.X home page <a href="http://junit.sourceforge.net/junit3.8.1/index.html"><code>http://junit.sourceforge.net/junit3.8.1/index.html</code></a></p>
</li>
<li>
<p>JUnit 4.X home page <a href="http://junit.sourceforge.net"><code>http://junit.sourceforge.net</code></a></p>
<ul>
<li>
<p>API documentation <a href="http://junit.sourceforge.net/javadoc_40/index.html"><code>http://junit.sourceforge.net/javadoc_40/index.html</code></a></p>
</li>
<li>
<p>JUnit Cookbook <a href="http://junit.sourceforge.net/doc/cookbook/cookbook.htm"><code>http://junit.sourceforge.net/doc/cookbook/cookbook.htm</code></a></p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
<div class="footer">
<hr />
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="100%">
<col width="33%" />
<col width="*" />
<col width="33%" />
<tr>
<td valign="bottom">
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="100">
<col width="*" />
<col width="48%" />
<col width="48%" />
<tr>
<td>&nbsp;</td>
<td align="center"><a href="servicemanagement.htm"><img src="../../dcommon/gifs/leftnav.gif" alt="Previous" /><br />
<span class="icon">Previous</span></a>&nbsp;</td>
<td align="center"><a href="customizations.htm"><img src="../../dcommon/gifs/rightnav.gif" alt="Next" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="copyrightlogo"><img class="copyrightlogo" src="../../dcommon/gifs/oracle.gif" alt="Oracle Logo" /><br />
<span class="copyrightlogo">Copyright&nbsp;&copy;&nbsp;2002, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.</span> <a href="../../dcommon/html/cpyr.htm"><br />
<span class="copyrightlogo">Legal Notices</span></a></td>
<td valign="bottom" align="right">
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="225">
<tr>
<td>&nbsp;</td>
<td align="center" valign="top"><a href="toc.htm"><img src="../../dcommon/gifs/toc.gif" alt="Go To Table Of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td align="center" valign="top"><a href="index.htm"><img src="../../dcommon/gifs/index.gif" alt="Go To Index" /><br />
<span class="icon">Index</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
</div>
<!-- class="footer" -->
</body>
</html>
