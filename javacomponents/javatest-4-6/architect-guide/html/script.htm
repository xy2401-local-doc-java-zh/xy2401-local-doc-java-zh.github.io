<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="Content-Script-Type" content="text/javascript" />
<title>Test Scripts</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 1.0.24" />
<meta name="date" content="2014-08-01T11:38:1Z" />
<meta name="robots" content="noarchive" />
<meta name="doctitle" content="Test Scripts" />
<meta name="relnum" content="JavaTest Harness 4.6" />
<meta name="partnum" content="E20663-04" />
<link rel="copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />
<link rel="stylesheet" href="../../dcommon/css/blafdoc.css" title="Oracle BLAFDoc" type="text/css" />
<link rel="contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="index" href="index.htm" title="Index" type="text/html" />
<link rel="prev" href="finder.htm" title="Previous" type="text/html" />
<link rel="next" href="servicemanagement.htm" title="Next" type="text/html" />

                    <script>var w=window;if(w.performance||w.mozPerformance||w.msPerformance||w.webkitPerformance){var d=document;AKSB=w.AKSB||{},AKSB.q=AKSB.q||[],AKSB.mark=AKSB.mark||function(e,_){AKSB.q.push(["mark",e,_||(new Date).getTime()])},AKSB.measure=AKSB.measure||function(e,_,t){AKSB.q.push(["measure",e,_,t||(new Date).getTime()])},AKSB.done=AKSB.done||function(e){AKSB.q.push(["done",e])},AKSB.mark("firstbyte",(new Date).getTime()),AKSB.prof={custid:"322179",ustr:"",originlat:"0",clientrtt:"1",ghostip:"23.212.3.15",ipv6:false,pct:"10",clientip:"45.78.37.67",requestid:"29b729a6",region:"32996",protocol:"",blver:14,akM:"dsca",akN:"ae",akTT:"O",akTX:"1",akTI:"29b729a6",ai:"206465",ra:"false",pmgn:"",pmgi:"",pmp:"",qc:""},function(e){var _=d.createElement("script");_.async="async",_.src=e;var t=d.getElementsByTagName("script"),t=t[t.length-1];t.parentNode.insertBefore(_,t)}(("https:"===d.location.protocol?"https:":"http:")+"//ds-aksb-a.akamaihd.net/aksb.min.js")}</script>
                    <script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<div class="header"><a id="top" name="top"></a>
<div class="zz-skip-header"><a href="#BEGIN">Skip Headers</a></div>
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="100%">
<tr>
<td align="left" valign="top"><b>JavaTest Harness Architect's Guide,</b><br />
<b>JavaTest Harness 4.6 for the Java Platform</b><br />
E20663-04</td>
<td valign="bottom" align="right">
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="225">
<tr>
<td>&nbsp;</td>
<td align="center" valign="top"><a href="toc.htm"><img src="../../dcommon/gifs/toc.gif" alt="Go To Table Of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td align="center" valign="top"><a href="index.htm"><img src="../../dcommon/gifs/index.gif" alt="Go To Index" /><br />
<span class="icon">Index</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
<hr />
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="100">
<tr>
<td align="center"><a href="finder.htm"><img src="../../dcommon/gifs/leftnav.gif" alt="Previous" /><br />
<span class="icon">Previous</span></a>&nbsp;</td>
<td align="center"><a href="servicemanagement.htm"><img src="../../dcommon/gifs/rightnav.gif" alt="Next" /><br />
<span class="icon">Next</span></a></td>
<td>&nbsp;</td>
</tr>
</table>
<a name="BEGIN" id="BEGIN"></a></div>
<!-- class="header" -->
<div class="ind"><!-- End Header -->
<script type="text/javascript" class="oac_no_warn">
<!-- // <![CDATA[
window.name='script'
// ]]> -->
</script> <script type="text/javascript" class="oac_no_warn">
// <![CDATA[
function footdisplay(footnum,footnote) {
    var msg = window.open('', 'NewWindow' + footnum,
        'directories=no,height=120,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');

    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">');
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><title>');
    msg.document.write('Footnote ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('<meta http-equiv="Content-Script-Type" ');
    msg.document.write('content="text/javascript" />');
    msg.document.write('<style type="text/css"> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><h1>Footnote ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/body><\/html>');
    msg.document.close();
    msg.focus();
}
// ]]>
</script> <noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript><a id="CEHJBHGI" name="CEHJBHGI"></a>
<h1 class="chapter"><span class="secnum">10</span> Test Scripts</h1>
<p><a id="sthref278" name="sthref278"></a><a id="sthref279" name="sthref279"></a>The test script is responsible for running a test, recording all the details in a <code>TestResult</code> object, and returning the test's status (pass, fail, error) to the JavaTest harness. The test script must understand how to interpret the test description information returned to it by the test finder. The test script breaks down the execution of the test into a series of logical steps based on information from the test description and the test execution model. The test script can run the test itself or delegate all or part of that responsibility to <span class="italic">commands</span>. A fresh, new copy of the test script is created for each test. This design allows you to create test scripts for different test suites that use the same commands, much like shell and batch scripts are composed from different operating system commands.</p>
<a id="Z40036491003327" name="Z40036491003327"></a>
<div class="sect1">
<h2 class="sect1">Design Decisions</h2>
<p>One of the most significant design decisions that you make is how the test script executes tests. The mechanism that you design can be very simple but inflexible, or it can be more complex and much more flexible.</p>
<a id="Z40036491003263" name="Z40036491003263"></a>
<div class="sect2">
<h3 class="sect2">Simple Test Scripts</h3>
<p>Simple and less flexible test scripts construct test command lines directly from the test description and the test environment.</p>
<p>At the most simplistic level, scripts can execute tests using <code>Runtime.exec</code>. For example using the JDK:</p>
<pre xml:space="preserve" class="oac_no_warn">
Runtime r = Runtime.getRuntime();
String[] cmd = {"java", "MyTest"};
String[] env = {"-classpath", testsDir + "/classes"};
Process p = r.exec(cmd, env);
// read output from test using
// p.getInputStream() and p.getErrorStream()
// (best done with a separate thread for each stream)
int rc = p.waitFor();
Status s = (rc == 0 ? Status.passed("OK") : 
Status.failed("process exited with return code " + rc);
// s contains result status from executing command
</pre>
<p>In this case the test script is responsible for collecting the test's exit status.</p>
<p>The JavaTest harness provides a number of library commands that the script can use to execute system commands in different execution environments; these are described in <a href="stdcmds.htm#CGFJBCJB">Appendix A</a>. One example is the library command named <code>com.sun.javatest.lib.ProcessCommand</code>. <code>ProcessCommand</code> executes a system command in a separate process on the same machine running the test script. For example:</p>
<pre xml:space="preserve" class="oac_no_warn">
String[] args = {"-classpath" + testsDir + "/classes", "java", "MyTest"};
PrintWriter out1 = ... // create error message stream
PrintWriter out2 = ... // create output message stream
Command cmd = new ProcessCommand();
Status s = cmd.run(args, out1, out2);
// output from command will be written automatically to
// the out1 and out2 streams
// s contains result status from executing command
</pre>
<p>The result of the command is a <code>Status</code> object based upon the exit code of the process. The exit code is analyzed by the test script and factored into the final test result. For example, if a script is executing a test by means of a series of commands and one of them fails unexpectedly, the execution may stop at that point.</p>
</div>
<!-- class="sect2" -->
<a id="Z40036491003275" name="Z40036491003275"></a>
<div class="sect2">
<h3 class="sect2">More Flexible Test Scripts</h3>
<p>More sophisticated and flexible test scripts use <span class="italic">command</span> <span class="italic">templates</span> to create custom commands. Command templates are designed by you and are created by the configuration interview from configuration information and test description information (see <a href="interview.htm#BBJGIBFG">Chapter 6</a>). Command templates can be created with some components of the template specified in the form of variables that the test script resolves when it uses the command to run a test. A configuration interview may provide several different templates; the script chooses among them as required for each individual test.</p>
<p>For example, a configuration interview might create a custom command template named <code>command.testExecute</code> that can be used to run all of the tests in a test suite.</p>
<pre xml:space="preserve" class="oac_no_warn">
command.testExecute=com.sun.javatest.lib.ProcessCommand
\bin\java.exe -classpath $testSuiteRootDir\classesJDKC:\
$testExecuteClass $testExecuteArgs
</pre>
<p>The test script sets the value of the variables ($testExecuteClass and $testExecuteArgs) for <span class="italic">each test</span>. To review the parts of the template see <a href="interview.htm#BBJDCHAJ">Example 1</a>.</p>
<p>The use of variables allows you to create flexible commands that can be used with all of the tests in the test suite. The following test script fragment shows how a test script invokes the <code>testExecute</code> command<a id="Z40036491002280" name="Z40036491002280" href="#Z40036491002280" onclick='footdisplay(1,"When the command is invoked, the \"\u003ccode\u003ecommand.\u003c/code\u003e\" prefix is not used.")'><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a> whenever it runs a test. Note that the test script uses its <code>invokeCommand()</code> method to execute commands:</p>
<pre xml:space="preserve" class="oac_no_warn">
import com.sun.javatest.*;
 
class MyScript extends Script {
    public Status run(String[] args, TestDescription td, TestEnvironment env) {
    
    ...
        
    // Extract values from the test description
    String executeClass = td.getParameter("executeClass");
    String executeArgs  = td.getParameter("executeArgs");
 
    ...
 
    // Set variables in the template
    env.put("testExecuteClass", executeClass);
    env.put("testExecuteArgs", executeArgs);
    // Invoke the command
    Status s = invokeCommand("testExecute");
    
    ...
    
    return s;
    }
}
</pre>
<p>In this example, the test script executes a single command for each test &#8212; the test scripts can also execute complex, multi-part tests that may involve multiple command invocations. The following examples describes some common multi-part test scenarios.</p>
<a id="Z40036491003250" name="Z40036491003250"></a>
<div class="sect3">
<h4 class="sect3">Example 1</h4>
<p>Compiler tests generally require a multi-part test script. To test the Java compiler two stages are required:</p>
<ol>
<li>
<p>The compiler compiles test files</p>
</li>
<li>
<p>The output from that compilation is run to ensure that it executes as expected</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="Z40036491003254" name="Z40036491003254"></a>
<div class="sect3">
<h4 class="sect3">Example 2</h4>
<p>Distributed tests are required to start a process on a remote system with which the test interacts. This requires a multi-part test that:</p>
<ol>
<li>
<p>Sets up the remote system</p>
</li>
<li>
<p>Runs the primary test class that interacts with the remote system</p>
</li>
</ol>
<p>The JavaTest harness is shipped with the source to a sample test script (StdTestScript.java) that you can refer to in the <span class="italic">jt_install</span><code>\examples\javatest\sampleFiles</code> directory.</p>
<p>See the <code>Script</code> API documentation for information about the <code>Script</code> class.<a id="sthref280" name="sthref280"></a><a id="sthref281" name="sthref281"></a></p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CEHEGFBA" name="CEHEGFBA"></a>
<div class="sect1">
<h2 class="sect1">Writing Custom Commands</h2>
<p><a id="sthref282" name="sthref282"></a><a id="sthref283" name="sthref283"></a>Commands are the means by which the JavaTest harness invokes platform or test components to perform a step of the <a id="sthref284" name="sthref284"></a>test execution model embodied in a <a id="sthref285" name="sthref285"></a><a id="sthref286" name="sthref286"></a>test script. The JavaTest harness provides standard commands that are suitable for most uses, including test systems that can execute programs in a separate address space, and test systems that provide a single Java virtual machine.</p>
<p>If none of the standard commands are suitable, you can write a new one tailored to the test suite's specific requirements. One scenario that requires a custom command is when the test suite uses a single JVM, and the test invokes a program that does not have a standard interface that can be used by one of the standard commands. In this case, you can write a very simple converter command that connects the interface expected by the JavaTest harness with the interface provided by the program.</p>
<p>The class for a command is similar (apart from the name) to the standard <code>Test</code> interface. The full class name is <a id="sthref287" name="sthref287"></a><code>com.sun.javatest.Command</code>.</p>
<pre xml:space="preserve" class="oac_no_warn">
abstract class <a id="sthref288" name="sthref288"></a>Command {
   Status run(String[] args, PrintWriter out1, PrintWriter out2)
   ...
}
</pre>
<p>The <code>args</code> argument is constructed in and passed down from the script that invokes the command. Output written to the <code>out1</code> stream and <code>out2</code> stream is recorded in the appropriate test result file.</p>
<p><a href="#Z40037d71003626">Example 10-1</a> is an example of a command that invokes a compiler in the same JVM as the JavaTest harness, using an API for the compiler. The example uses the JDK compiler which is usually invoked directly from the command line; however, in this case an undocumented API is used. The details of how to create the <code>PrintStream</code> <code>outStream</code> from the <code>PrintWriter</code> <code>out</code> are omitted here for simplicity; the main point is to illustrate how easy it can be to write a <a id="sthref289" name="sthref289"></a>wrapper class that passes arguments through to a non-standard API, and converts the results into the format that the JavaTest harness requires.</p>
<p>See the source code for <a id="sthref290" name="sthref290"></a><code>JavaCompileCommand</code> in the <span class="italic">jt_install</span><code>\examples\javatest\sampleFiles</code> directory for a complete, commented example.</p>
<div class="example"><a id="Z40037d71003626" name="Z40037d71003626"></a>
<p class="titleinexample">Example 10-1 <code>JavaCompileCommand</code></p>
<pre xml:space="preserve" class="oac_no_warn">
public class <a id="sthref291" name="sthref291"></a>JavaCompileCommand implements Command
{
   public Status run (String[] args, PrintWriter out1,PrintWriter out2) 
   {
      PrintStream outStream = ... // create stream from out
      sun.tools.javac.Main compiler = ;
            new sun.tools.javac.Main(outStream, "javac")
      boolean ok = compiler.compile(args);
      return (ok ? Status.passed("Compilation OK") :
            Status.failed("Compilation failed"));
   }
}
</pre></div>
<!-- class="example" -->
<p>For information on the standard commands provided with JavaTest. see <a href="stdcmds.htm#CGFJBCJB">Appendix A</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CEHHBGCJ" name="CEHHBGCJ"></a>
<div class="sect1">
<h2 class="sect1">Test Result</h2>
<p>To store test results, the JavaTest harness creates and maintains a <code>TestResult</code> object for each test. The test script stores information in a <code>TestResult</code> object while it executes a test. This information is presented to users in the JavaTest GUI and is useful when troubleshooting test runs. The more information the test script provides, the easier it is for the user to understand what occurred when the test was run.</p>
<p>The <code>TestResult</code> object contains elements:</p>
<div class="tblhruleformal"><a id="sthref292" name="sthref292"></a><a id="sthref293" name="sthref293"></a>
<p class="titleintable">Table 10-1 Test Result Object Elements</p>
<table class="HRuleFormal" title="Test Result Object Elements" summary="TestResult object contains Test Description, configuration, Test Run details, and Test Run messages" dir="ltr" border="1" width="100%" frame="hsides" rules="rows" cellpadding="3" cellspacing="0">
<col width="20%" />
<col width="*" />
<tbody>
<tr align="left" valign="top">
<td align="left" id="r1c1-t2">
<p>Test description</p>
</td>
<td align="left">
<p>The test description used for the test.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r2c1-t2">
<p>Configuration</p>
</td>
<td align="left" headers="r2c1-t2">
<p>The portions of the environment used to run the test. This information is displayed to the user in the Configuration tab of the JavaTest GUI.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r3c1-t2">
<p>Test run details</p>
</td>
<td align="left" headers="r3c1-t2">
<p>Information about the test run. For example, start time, end time, This information is displayed to the user in the Test Run Details tab of the JavaTest GUI.Note: The test script has access to this field and can write additional information using the TestResult API.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r4c1-t2">
<p>Test run messages</p>
</td>
<td align="left" headers="r4c1-t2">
<p>Test output messages. This section is written by the Script class's invokeCommand() method. This section contains at least two subsections, one for messages from the test script and one for each part of the test (if it is a multi-part test). This information is displayed to the user in the Test Run Message tab of the JavaTest GUI.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<p><a id="sthref294" name="sthref294"></a>When a test completes execution, the JavaTest harness writes the results to the file <span class="italic">testname</span><code>.jtr</code> in the work directory. Test result files are created in directory hierarchies analogous to the hierarchies in which the tests are organized.</p>
<p>See the API documentation for the <a id="sthref295" name="sthref295"></a><code>TestResult</code> class.</p>
</div>
<!-- class="sect1" -->
<hr />
<br />
<p style="text-decoration:underline">Footnote Legend</p>
Footnote&nbsp;1:&nbsp;When the command is invoked, the "<code>command.</code>" prefix is not used.<br /></div>
<!-- class="ind" -->
<!-- Start Footer -->
<div class="footer">
<hr />
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="100%">
<col width="33%" />
<col width="*" />
<col width="33%" />
<tr>
<td valign="bottom">
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="100">
<col width="*" />
<col width="48%" />
<col width="48%" />
<tr>
<td>&nbsp;</td>
<td align="center"><a href="finder.htm"><img src="../../dcommon/gifs/leftnav.gif" alt="Previous" /><br />
<span class="icon">Previous</span></a>&nbsp;</td>
<td align="center"><a href="servicemanagement.htm"><img src="../../dcommon/gifs/rightnav.gif" alt="Next" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="copyrightlogo"><img class="copyrightlogo" src="../../dcommon/gifs/oracle.gif" alt="Oracle Logo" /><br />
<span class="copyrightlogo">Copyright&nbsp;&#169;&nbsp;2002, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.</span> <a href="../../dcommon/html/cpyr.htm"><br />
<span class="copyrightlogo">Legal Notices</span></a></td>
<td valign="bottom" align="right">
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="225">
<tr>
<td>&nbsp;</td>
<td align="center" valign="top"><a href="toc.htm"><img src="../../dcommon/gifs/toc.gif" alt="Go To Table Of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td align="center" valign="top"><a href="index.htm"><img src="../../dcommon/gifs/index.gif" alt="Go To Index" /><br />
<span class="icon">Index</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
</div>
<!-- class="footer" -->
</body>
</html>
