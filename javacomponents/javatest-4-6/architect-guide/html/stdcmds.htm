<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=us-ascii" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="Content-Script-Type" content="text/javascript" />
<title>Standard Commands</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 1.0.24" />
<meta name="date" content="2014-08-01T11:38:1Z" />
<meta name="robots" content="noarchive" />
<meta name="doctitle" content="Standard Commands" />
<meta name="relnum" content="JavaTest Harness 4.6" />
<meta name="partnum" content="E20663-04" />
<link rel="copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />
<link rel="stylesheet" href="../../dcommon/css/blafdoc.css" title="Oracle BLAFDoc" type="text/css" />
<link rel="contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="index" href="index.htm" title="Index" type="text/html" />
<link rel="prev" href="customizations.htm" title="Previous" type="text/html" />
<link rel="next" href="formats.htm" title="Next" type="text/html" />
<script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<div class="header"><a id="top" name="top"></a>
<div class="zz-skip-header"><a href="#BEGIN">Skip Headers</a></div>
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="100%">
<tr>
<td align="left" valign="top"><b>JavaTest Harness Architect's Guide,</b><br />
<b>JavaTest Harness 4.6 for the Java Platform</b><br />
E20663-04</td>
<td valign="bottom" align="right">
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="225">
<tr>
<td>&nbsp;</td>
<td align="center" valign="top"><a href="toc.htm"><img src="../../dcommon/gifs/toc.gif" alt="Go To Table Of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td align="center" valign="top"><a href="index.htm"><img src="../../dcommon/gifs/index.gif" alt="Go To Index" /><br />
<span class="icon">Index</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
<hr />
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="100">
<tr>
<td align="center"><a href="customizations.htm"><img src="../../dcommon/gifs/leftnav.gif" alt="Previous" /><br />
<span class="icon">Previous</span></a>&nbsp;</td>
<td align="center"><a href="formats.htm"><img src="../../dcommon/gifs/rightnav.gif" alt="Next" /><br />
<span class="icon">Next</span></a></td>
<td>&nbsp;</td>
</tr>
</table>
<a name="BEGIN" id="BEGIN"></a></div>
<!-- class="header" -->
<div class="ind"><!-- End Header --><a id="CGFJBCJB" name="CGFJBCJB"></a>
<h1 class="appendix"><span class="secnum">A</span> Standard Commands</h1>
<p><a id="sthref368" name="sthref368"></a><a id="sthref369" name="sthref369"></a>The JavaTest harness provides a number of standard commands that you can use to configure an environment to run a test suite on your test platform. These commands all extend the standard JavaTest <code>Command</code> class.</p>
<p>With these standard commands, you can configure the JavaTest harness for a wide variety of test platforms. If, however, you find that you cannot create an environment for your test platform using these commands, you may need to write your own: see <a href="script.htm#CEHEGFBA">Writing Custom Commands</a> for more details.</p>
<p>The standard commands are as follows:</p>
<ul>
<li>
<p><a href="#CGFFEICI">ActiveAgentCommand</a>: A command to execute a subcommand on a JavaTest Agent running in active mode</p>
</li>
<li>
<p><a href="#CGFBCIEI">ExecStdTestSameJVMCmd</a>: A command to execute a simple API test in the same JVM in which the JavaTest harness or the JavaTest Agent is running</p>
</li>
<li>
<p><a href="#Z400231b28738">ExecStdTestOtherJVMCmd</a>: A command to execute a simple API test in a JVM that is separate from the JVM in which the JavaTest harness or the JavaTest Agent is running</p>
</li>
<li>
<p><a href="#Z4002fde30388">JavaCompileCommand</a>: An example command that demonstrates how to invoke a Java application via a wrapper class</p>
</li>
<li>
<p><a href="#CGFBFHCD">PassiveAgentCommand</a>: A command to execute a subcommand on a JavaTest Agent running in passive mode</p>
</li>
<li>
<p><a href="#Z400231b28460">ProcessCommand</a>: A command to execute a system command in a separate process</p>
</li>
<li>
<p><a href="#CHDDBAAG">SerialAgentCommand</a>: A command to execute a subcommand on a JavaTest Agent, communicating via a serial line</p>
<div align="center">
<div class="inftblnote"><br />
<table class="Note oac_no_warn" summary="" border="1" width="80%" frame="hsides" rules="groups" cellpadding="3" cellspacing="0">
<tbody>
<tr>
<td align="left">
<p class="notep1">Note:</p>
<p>Examples in this appendix use Unix style commands and file separators.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblnote" --></div>
</li>
</ul>
<a id="CGFFEICI" name="CGFFEICI"></a>
<div class="sect1">
<h2 class="sect1">ActiveAgentCommand</h2>
<p>A command to execute a command in a separate JVM, typically on a remote machine, by delegating it to a JavaTest Agent which has been configured to run in active mode. This means it contacts the JavaTest harness to determine what it should do.</p>
<p>The JavaTest active agent pool must be started before you start running tests that use this command. The active agent pool holds the requests from the active agents until they are required. You can start the active agent pool from the JavaTest GUI or <a id="sthref370" name="sthref370"></a>command line.<a id="sthref371" name="sthref371"></a></p>
<p><span class="bold">Usage</span></p>
<pre xml:space="preserve" class="oac_no_warn">
com.sun.javatest.agent.ActiveAgentCommand [options] command-class [command-arguments]
</pre>
<p><span class="bold">Arguments</span></p>
<div class="inftblinformal">
<table class="Informal" summary="ActiveAgentCommand arguments" dir="ltr" border="1" width="100%" frame="hsides" rules="groups" cellpadding="3" cellspacing="0">
<col width="23%" />
<col width="*" />
<tbody>
<tr align="left" valign="top">
<td align="left" id="r1c1-t3">
<pre xml:space="preserve" class="oac_no_warn">
-classpath <span class="italic">path</span>
</pre></td>
<td align="left">
<p>This option allows you to specify a classpath <span class="italic">on the system running the JavaTest harness</span> from which to load the command class and any classes it invokes. The classes are automatically loaded into the agent as needed. If the class path is not specified, the classes are loaded from the agent's class path. See <a href="createts.htm#CJBGJHDB">Chapter 4</a> for additional information about using the <code>-classpath</code> option.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r2c1-t3">
<p>&ndash;<code>mapArgs</code></p>
</td>
<td align="left" headers="r2c1-t3">
<p>The command to be executed might contain values that are specific to the host running the JavaTest harness and that might not be appropriate for the host that actually runs the command. If this option is given, the agent uses a local mapping file to translate specified string values into replacement values. This is typically used to map filenames from the view on one host to the view on another. See the JavaTest online help for more information.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r3c1-t3">
<p><a id="sthref372" name="sthref372"></a>&ndash;<code>tag</code> <span class="italic">tag</span></p>
</td>
<td align="left" headers="r3c1-t3">
<p>This option allows the user to specify a string that is used to identify the request on the agent. If not specified, the default value, <span class="italic">command-class</span>, is used. It is suggested that the URL of the test should be used as the value for this option. A configuration can use the symbolic name <code>$testURL</code><a id="sthref373" name="sthref373"></a>, which is substituted when the command is executed.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r4c1-t3">
<p><code>command</code> <span class="italic">class</span></p>
</td>
<td align="left" headers="r4c1-t3">
<p>The name of a command class to be executed by the agent. If the -classpath option is not used, the class should be on the classpath of the agent, and should be appropriate for the agent, depending on the security restrictions in effect. For example, an agent running as an application might be able to run a <code>ProcessCommand</code>, but an agent running as an applet might not. The class should implement the interface <code>com.sun.javatest.Command</code>.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r5c1-t3">
<p><code>command arguments</code></p>
</td>
<td align="left" headers="r5c1-t3">
<p>The arguments to be passed to the run method of an instance of the command class running on the agent. The arguments can be translated to agent-specific values if the <code>&ndash;mapArgs</code> option is given.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p><span class="bold">Description</span></p>
<p><code>ActiveAgentCommand</code> is a facility to execute a command on a JavaTest Agent that has been configured to run in active mode. A JavaTest Agent provides the ability to run tests in a context that might not be able to support the JavaTest harness. This could be because the tests are to be run on a machine with limited resources (such as memory), or in a security-restricted environment (such as a browser), or on a newly developed platform on which it is not possible to run the JDK.</p>
<p>Commands often contain host-specific arguments, such as filenames or directories. Although the files and directories might be accessible from the agent host (and in general, should be), the paths might be different. For example, <code>/usr/local</code> on a Solaris platform might be mounted as a network drive like <code>H:</code> on a Windows platform. When an agent is initialized, it may be given information on how to translate strings from one domain to another. On a per-command basis, the agent can be instructed to translate a command according to the translation tables it is given.</p>
<p>The command to be executed on an agent can be identified with a tag for tracing and debugging purposes. If none is specified, a default identification is used.</p>
<p>Any output written by the command when it is executed by the agent appears as the output of the <code>ActiveAgentCommand</code> command itself. If the command is successfully executed by the agent (i.e. the <code>Command</code> object is successfully created and the <code>run</code> method invoked), the result of <code>ActiveAgentCommand</code> is the result of the command executed by the agent. Otherwise, an appropriate error status is returned.</p>
<p><span class="bold">Example:</span></p>
<p><span class="bold">Using ActiveAgentCommand to Execute a ProcessCommand on an Active Agent</span></p>
<p>This example is based on the following sample code demonstrating <code>ProcessCommand</code>:</p>
<pre xml:space="preserve" class="oac_no_warn">
com.sun.javatest.lib.ProcessCommand /usr/local/jdk1.6/solaris/bin/javac
     -classpath /home/juser/classes &ndash;d /home/juser/classes HelloTest.java
</pre>
<p>To make a command execute on another machine, prefix it with <code>ActiveAgentCommand</code> and any arguments that <code>ActiveAgentCommand</code> requires:</p>
<pre xml:space="preserve" class="oac_no_warn">
compile.java=com.sun.javatest.agent.ActiveAgentCommand com.sun.javatest.lib.ProcessCommand \
     /usr/local/jdk1.6/solaris/bin/javac \
     -classpath /home/<span class="italic">juser</span>/classes \
     &ndash;d /home/<span class="italic">juser</span>/classes HelloTest.java
</pre>
<p><span class="bold">See Also</span>:</p>
<p>All the other standard commands in this appendix. Subject to security restrictions on the agent, they can all be executed remotely by means of <code>ActiveAgentCommand</code>.</p>
</div>
<!-- class="sect1" -->
<a id="CGFBCIEI" name="CGFBCIEI"></a>
<div class="sect1">
<h2 class="sect1">ExecStdTestSameJVMCmd</h2>
<p>A command <a id="sthref374" name="sthref374"></a>that executes a standard test in the same JVM in which JavaTest Agent is running.</p>
<p><span class="bold">Usage</span></p>
<p><code>com.sun.javatest.lib.ExecStdTestSameJVMCmd</code> [<span class="italic">options</span>] <span class="italic">test_class</span> [<span class="italic">test_args</span>]</p>
<p><span class="bold">Arguments</span></p>
<div class="inftblinformal">
<table class="Informal" summary="arguments descriptions for ExecStdTestSame JVMCmd" dir="ltr" border="1" width="100%" frame="hsides" rules="groups" cellpadding="3" cellspacing="0">
<col width="21%" />
<col width="*" />
<tbody>
<tr align="left" valign="top">
<td align="left" id="r1c1-t4">
<p>&ndash;loadDir <span class="italic">directory</span></p>
</td>
<td align="left">
<p>Creates a <code>ClassLoader</code> that loads any necessary classes from the specified directory. The <code>ClassLoader</code> is garbage collected once <code>ExecStdTestSameJVMCmd</code> has completed. If you do not specify <code>-loadDir</code>, the system class loader is used. Using a separate <code>ClassLoader</code> for each test reduces the chance that one test interferes with another. Also, using a separate <code>ClassLoader</code> allows the command to unload test classes after the test is executed, which could be critical in memory constrained environments.</p>
<p>On some systems, the security manager restricts the ability to create a <code>ClassLoader</code>. If you use this option and cannot create a <code>ClassLoader</code>, the command throws a <code>SecurityException.</code></p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r2c1-t4">
<p>test class</p>
</td>
<td align="left" headers="r2c1-t4">
<p>Specifies the name of the test class to execute. This class must be a subtype of <code>com.sun.javatest.Test</code>. To specify a class in the test description currently being processed by the JavaTest harness, use the <code>$executeClass</code> substitution variable.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r3c1-t4">
<p>test args</p>
</td>
<td align="left" headers="r3c1-t4">
<p>Specifies a list of arguments to be passed to the <code>run</code> method of the class being executed. To specify arguments in the test description currently being processed by the JavaTest harness, use the <code>$executeArgs</code> substitution variable</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p><span class="bold">Description</span></p>
<p><code>ExecStdTestSameJVMCmd</code> is a JavaTest command that executes a standard test in the same JVM in which the JavaTest Agent is running. The class must be a subtype of <code>com.sun.javatest.Test</code>.</p>
<p><code>ExecStdTestSameJVMCmd</code> creates a new instance of the class, calls its <code>run</code> method, and passed the class args. If the class is successfully created and invoked, the result of <code>ExecStdTestSameJVMCmd</code> is equal to the result of the <code>run</code> method of the object.</p>
<p><span class="bold">Examples:</span></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;<span class="bold">Simple use of ExecStdTestSameJVMCmd:</span></p>
<pre xml:space="preserve" class="oac_no_warn">
     command.execute=com.sun.javatest.lib.ExecStdTestSameJVMCmd \
          $testExecuteClass $testExecuteArgs
</pre>
<p>&nbsp;&nbsp;&nbsp;&nbsp;<span class="bold">Using ExecStdTestSameJVMCmd Inside an Environment:</span></p>
<pre xml:space="preserve" class="oac_no_warn">
<code>     com.sun.javatest.lib.ExecStdTestSameJVMCmd HelloTest</code>
</pre>
<p><span class="bold">See Also:</span></p>
<p><code>ExecStdTestOtherJVMCmd</code></p>
</div>
<!-- class="sect1" -->
<a id="Z400231b28738" name="Z400231b28738"></a>
<div class="sect1">
<h2 class="sect1">ExecStdTestOtherJVMCmd</h2>
<p>A variant of <code>ProcessCommand</code> that executes a standard test using a subcommand in a separate process.</p>
<p><span class="bold">Usage</span></p>
<p><code>com.sun.javatest.lib.ExecStdTestOtherJVMCmd</code> [<span class="italic">options</span>] &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<span class="italic">shell variables</span>] <code>subcommand</code> [<span class="italic">args</span>]</p>
<p><span class="bold">Arguments</span></p>
<div class="inftblinformal">
<table class="Informal" summary="ExecStdTestOtherJVMCmd" dir="ltr" border="1" width="100%" frame="hsides" rules="groups" cellpadding="3" cellspacing="0">
<col width="24%" />
<col width="*" />
<tbody>
<tr align="left" valign="top">
<td align="left" id="r1c1-t5">
<p>&ndash;v</p>
</td>
<td align="left">
<p>Used for verbose mode. When ExecStdTestOtherJVMCmd is in verbose mode, additional output information is sent to the TestResult object.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r2c1-t5">
<p>shell variables</p>
</td>
<td align="left" headers="r2c1-t5">
<p>Specifies one or more shell environment values that are required by the sub-command. Shell environment variables are written as: name=value.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r3c1-t5">
<p>subcommands</p>
</td>
<td align="left" headers="r3c1-t5">
<p>Specifies the name of a program that is executed.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r4c1-t5">
<p>args</p>
</td>
<td align="left" headers="r4c1-t5">
<p>Specifies the arguments that are passed to the subcommand.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p><span class="bold">Description</span></p>
<p><code>ExecStdTestOtherJVMCmd</code> is a JavaTest command that executes a test with a subcommand in a separate process (using a separate runtime). You would normally use this command to invoke a JVM to run the test class.Examples of subcommands are the compiler for the Java programming language (javac) and the JVM (java). Normally, a test exits by creating a Status object and then invoking its exit method. This command also returns a Status object, which is equal to the object returned by the test.</p>
<p><span class="bold">Examples</span></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;<span class="bold">Simple Use of ExecStdTestOtherJVMCmd</span></p>
<pre xml:space="preserve" class="oac_no_warn">
     com.sun.javatest.lib.ExecStdTestOtherJVMCmd \
          /usr/local/jdk1.6/solaris/bin/java \
          -classpath /home/juser/classes
          HelloTest 
</pre>
<p>&nbsp;&nbsp;&nbsp;&nbsp;<span class="bold">Using ExecStdTestOtherJVMCmd Inside an Environment</span></p>
<pre xml:space="preserve" class="oac_no_warn">
     command.execute=com.sun.javatest.lib.ExecStdTestOtherJVMCmd \
          /usr/local/jdk1.6/solaris/bin/java \
          -classpath /home/juser/classes
          $testExecuteClass $testExecuteArgs 
</pre>
<p><span class="bold">See Also</span>:</p>
<p><code>ExecStdTestSameJVMCmd</code>, <code>ProcessCommand</code></p>
</div>
<!-- class="sect1" -->
<a id="Z4002fde30388" name="Z4002fde30388"></a>
<div class="sect1">
<h2 class="sect1">JavaCompileCommand</h2>
<p>Invokes a compiler in the same JVM in which the JavaTest harness or the JavaTest Agent is running.</p>
<p><span class="bold">Usage</span></p>
<p><code>com.sun.javatest.lib.JavaCompileCommand [&ndash;compiler compiler-spec] [args]</code></p>
<p><span class="bold">Arguments</span></p>
<div class="inftblhruleinformal">
<table class="HRuleInformal" summary="javacompile command" dir="ltr" border="1" width="100%" frame="hsides" rules="rows" cellpadding="3" cellspacing="0">
<col width="29%" />
<col width="*" />
<tbody>
<tr align="left" valign="top">
<td align="left" id="r1c1-t6">
<p>-compiler compiler-spec</p>
</td>
<td align="left">
<p>If the &ndash;compiler option is given, compiler-spec specifies the class name for the compiler, optionally preceded by a name for the compiler followed by a ":". If no compiler name is given before the class name, the default name is "java" followed by a space and then the class name. If the &ndash;compiler option is not given, the default value for compiler-spec is javac:sun.tools.javac.Main.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r2c1-t6">
<p>args</p>
</td>
<td align="left" headers="r2c1-t6">
<p>Specifies the arguments to the compiler's compile method. If you use the default compiler, javac, the arguments are exactly the same as those you would use for javac. In this case, you should refer to documentation for the JDK for more details. Otherwise, refer to the documentation for the compiler you specify.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblhruleinformal" -->
<p><span class="bold">Description</span></p>
<p>This command is primarily an example that shows how any application written in the Java programming language can be interfaced to the JavaTest harness by writing a wrapper command. By default, the application in this example is the JDK compiler, javac, but any class implementing the same signature can be invoked. javac is normally run from the command line, per its specification, but it does have an undocumented interface API, that is sufficiently typical to be used as the basis for this example.</p>
<p>The compiler is assumed to have a constructor and compile method matching the following signature:</p>
<pre xml:space="preserve" class="oac_no_warn">
public class COMPILER {
     public COMPILER(java.io.OutputStream out, String name);
     boolean compile(String[] args);
}
</pre>
<p>When <code>JavaCompileCommand</code> is used, an instance of the compiler is created. The constructor is passed a stream to which to write any messages, and the name of the compiler to be used in those messages. Then, the compile method is called with any args passed to <code>JavaCompileCommand</code>. If the compile method returns true, the result is a status of "passed"; if it returns false, the result is "failed". If any problems arise, the result is "error".</p>
<p>The source code for this example is provided in the examples directory. It is the file <code>JavaCompileCommand.java</code> in the directory <code>src/share/classes/com/sun/javatest/lib/</code> under the main JavaTest installation directory.</p>
<p><span class="bold">Examples:</span></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;<span class="bold">Simple use of JavaCompileCommand</span></p>
<pre xml:space="preserve" class="oac_no_warn">
     com.sun.javatest.lib.JavaCompileCommand HelloWorld.java
</pre>
<p>&nbsp;&nbsp;&nbsp;&nbsp;<span class="bold">Using JavaCompileCommand Inside an Environment</span></p>
<pre xml:space="preserve" class="oac_no_warn">
     command.compile.java=com.sun.javatest.lib.JavaCompileCommand \
         &ndash;d $testClassDir $testSource
</pre>
<p>&nbsp;&nbsp;&nbsp;&nbsp;<span class="bold">Using JavaCompileCommand to Invoke the RMI compiler</span></p>
<pre xml:space="preserve" class="oac_no_warn">
     command.compile.java=com.sun.javatest.lib.JavaCompileCommand \
          &ndash;compiler rmic:sun.rmi.rmic.Main \
          &ndash;d $testClassDir $testSource
</pre>
<p><span class="bold">See Also</span>:</p>
<p>ProcessCommand</p>
</div>
<!-- class="sect1" -->
<a id="CGFBFHCD" name="CGFBFHCD"></a>
<div class="sect1">
<h2 class="sect1"><a id="sthref375" name="sthref375"></a>PassiveAgentCommand</h2>
<p>A command to execute a command on a remote machine by delegating it to a JavaTest Agent that is configured to run in passive mode.</p>
<p><span class="bold">Usage</span></p>
<p><code>com.sun.javatest.agent.PassiveAgentCommand</code> [<span class="italic">options</span>] <span class="italic">command -class</span> [<span class="italic">command-arguments</span>]</p>
<p><span class="bold">Arguments</span></p>
<div class="inftblinformal">
<table class="Informal" summary="PassiveAgentCommand arguments" dir="ltr" border="1" width="100%" frame="hsides" rules="groups" cellpadding="3" cellspacing="0">
<col width="24%" />
<col width="*" />
<tbody>
<tr align="left" valign="top">
<td align="left" id="r1c1-t7">
<p>-classpath path</p>
</td>
<td align="left">
<p>This option lets you to specify a classpath on the system running the JavaTest harness from which to load the command class and any classes it invokes. The classes are automatically loaded into the agent as needed. Otherwise, classes are loaded using the agent's class path. See Chapter&nbsp;4 for additional information about using the -classpath&nbsp;option.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r2c1-t7">
<p>&ndash;host host-name</p>
</td>
<td align="left" headers="r2c1-t7">
<p>Specifies the host on which to run the command. A passive JavaTest Agent must be running on this host to execute the command. The option must be given; there is no default.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r3c1-t7">
<p>&ndash;mapArgs</p>
</td>
<td align="left" headers="r3c1-t7">
<p>The command to be executed might contain values that are specific to the host running the JavaTest harness and that might not be appropriate for the host that actually runs the command. If this option is given, the agent uses a local mapping file to translate specified string values into replacement values. This is typically used to map filenames from the view on one host to the view on another. See the JavaTest online help for more information.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r4c1-t7">
<p>&ndash;port port-number</p>
</td>
<td align="left" headers="r4c1-t7">
<p>This option specifies the port to which to connect when requesting an agent to run a command. The default value, 1908, is used if no value is explicitly given.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r5c1-t7">
<p>&ndash;tag tag<a id="sthref376" name="sthref376"></a></p>
</td>
<td align="left" headers="r5c1-t7">
<p>This option lets the user specify a string that identifies the request on the agent. If not specified, the default value, command-class, is used. It is suggested that the URL of the test be used as the value for this option. A configuration can use the symbolic name <a id="sthref377" name="sthref377"></a>$testURL, which is substituted when the command is executed.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r6c1-t7">
<p>command class</p>
</td>
<td align="left" headers="r6c1-t7">
<p>The name of a command class to be executed by the agent. The class should be on the classpath of the agent and be appropriate for the agent, depending on the security restrictions imposed on the agent. For example, an agent running as an application might be able to run a ProcessCommand, but an agent running as an applet might not. The class should implement the standard interface com.sun.javatest.Command.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r7c1-t7">
<p>command args</p>
</td>
<td align="left" headers="r7c1-t7">
<p>The arguments to be passed to the run method of an instance of the command class running on the agent. The arguments might be translated to agent-specific values if the &ndash;mapArgs option is given.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p><span class="bold">Description</span></p>
<p><code>PassiveAgentCommand</code> is a facility to execute a command on a JavaTest Agent that has been configured to run in passive mode. A JavaTest Agent provides the ability to run tests in a context that might not be able to support the entire JavaTest harness. Factors that require use of the JavaTest Agent include limited resources (such as memory), or in a security-restricted environment (such as a browser), or on a newly developed platform on which is not possible to run the JDK.The host and port options identify an agent to be used to execute the command. The JavaTest harness attempts to contact an agent on that system that is running and waiting for requests.</p>
<p>Commands often contain host-specific arguments, such as filenames or directories. Although the files and directories might be accessible from the agent host (and in general, should be), the paths might be different. For example, <code>/usr/local</code> on a Solaris platform can be mounted as a network drive like <code>H:</code> on a Windows NT platform. When an agent is initialized, it may be given information on how to translate strings from one domain to another. On a per-command basis, the agent can be instructed to translate a command according to the translation tables it is given.</p>
<p>The command to be executed on an agent can be identified with a tag for tracing and debugging purposes. If none is specified, a default identification is used.</p>
<p>Any output written by the command when it is executed by the agent appears as the output of the <code>PassiveAgentCommand</code> command itself. If the command is successfully executed by the agent (i.e. the <code>Command</code> object is successfully created and the <code>run</code> method invoked) then the result of <code>PassiveAgentCommand</code> is the result of the command executed by the agent. Otherwise, an appropriate error status is returned.</p>
<p><span class="bold">Examples</span></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;<span class="bold">Using</span> <code>ActiveAgentCommand</code> <span class="bold">to Execute a</span> <code>ProcessCommand</code> <span class="bold">on an Active Agent:</span></p>
<pre xml:space="preserve" class="oac_no_warn">
    compile.java=\
      com.sun.javatest.agent.PassiveAgentCommand &ndash;host calloway \
      com.sun.javatest.lib.ProcessCommand \
      /usr/local/jdk1.6/solaris/bin/javac \
      -classpath /home/juser/classes \
      &ndash;d /home/juser/classes HelloTest.java
</pre>
<p><span class="bold">See Also</span>:</p>
<p>All the other standard commands in this appendix. Subject to security restrictions on the agent, they can all be executed remotely by means of <code>PassiveAgentCommand</code>.</p>
</div>
<!-- class="sect1" -->
<a id="Z400231b28460" name="Z400231b28460"></a>
<div class="sect1">
<h2 class="sect1">ProcessCommand</h2>
<p><span class="bold">Usage</span></p>
<pre xml:space="preserve" class="oac_no_warn">
com.sun.javatest.lib.ProcessCommand [<span class="italic">options</span>] [<span class="italic">envvariables</span>]<span class="italic">command</span> [<span class="italic">command-arguments</span>]
</pre>
<p><span class="bold">Arguments</span></p>
<div class="inftblhruleinformal">
<table class="HRuleInformal" summary="ProcessCommand arguments" dir="ltr" border="1" width="100%" frame="hsides" rules="rows" cellpadding="3" cellspacing="0">
<col width="27%" />
<col width="*" />
<tbody>
<tr align="left" valign="top">
<td align="left" id="r1c1-t8">
<p>&ndash;v</p>
</td>
<td align="left">
<p>Verbose mode: tracing information is output to the log.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r2c1-t8">
<p>env variables</p>
</td>
<td align="left" headers="r2c1-t8">
<p>This is a list of named values to be passed as environment variables to the command to be executed. Each named value should be written as name=value.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r3c1-t8">
<p>command</p>
</td>
<td align="left" headers="r3c1-t8">
<p>This is the name of the command to be executed in a separate process.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r4c1-t8">
<p>command arguments</p>
</td>
<td align="left" headers="r4c1-t8">
<p>This is a list of arguments to be passed to the command to be executed.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblhruleinformal" -->
<p><span class="bold">Description</span></p>
<p><code>ProcessCommand</code> executes a system command in a separate process with the specified set of environment variables and arguments.</p>
<p>The result of the command is a Status object based upon the exit code of the process. An exit code of zero is interpreted as <code>Status.PASSED</code>; all other exit codes are interpreted as <code>Status.FAILED</code>. There are variants of <code>ProcessCommand</code> that provide different interpretations of the exit code. These variants can be used in more specialized circumstances, such as running tests that use exit codes like 95, 96, and 97.</p>
<p><code>ProcessCommand</code> copies the standard output stream of the process to the out2 command stream, and the standard error stream of the process to the out1 command stream.</p>
<p><span class="bold">Examples</span></p>
<p><span class="bold">&nbsp;&nbsp;&nbsp;&nbsp;Simple use of ProcessCommand</span></p>
<pre xml:space="preserve" class="oac_no_warn">
     com.sun.javatest.lib.ProcessCommand      
     /usr/local/jdk1.6/solaris/bin/javac 
     -classpath /home/juser/classes &ndash;d /home/<span class="italic">juser</span>/classes HelloTest.java
</pre>
<p>&nbsp;&nbsp;&nbsp;&nbsp;<span class="bold">Using ProcessCommand in an Environment</span></p>
<pre xml:space="preserve" class="oac_no_warn">
     compile.java=com.sun.javatest.lib.ProcessCommand \
           /usr/local/jdk1.6/solaris/bin/javac \
           -classpath /home/juser/classes \
           &ndash;d /home/juser/classes $testSource
</pre>
<p><span class="bold">See Also</span>:</p>
<p>ExecStdTestOtherJVMCmd</p>
</div>
<!-- class="sect1" -->
<a id="CHDDBAAG" name="CHDDBAAG"></a>
<div class="sect1">
<h2 class="sect1"><a id="sthref378" name="sthref378"></a>SerialAgentCommand</h2>
<p>A command to execute a command on a remote machine, by delegating it to a JavaTest Agent that has been configured to communicate via a serial RS232 line.</p>
<p><span class="bold">Usage</span></p>
<p><a id="sthref379" name="sthref379"></a>com.sun.javatest.agent.SerialAgentCommand [<span class="italic">options</span>] <span class="italic">command-class</span> [<span class="italic">command-arguments</span>]</p>
<p><span class="bold">Arguments</span></p>
<div class="inftblinformal">
<table class="Informal" summary="SerialAgentCommand arguments." dir="ltr" border="1" width="100%" frame="hsides" rules="groups" cellpadding="3" cellspacing="0">
<col width="24%" />
<col width="*" />
<tbody>
<tr align="left" valign="top">
<td align="left" id="r1c1-t9">
<p>-classpath path</p>
</td>
<td align="left">
<p>This option lets you specify a classpath on the system running the JavaTest harness from which to load the command class and any classes it invokes. The classes are automatically loaded into the agent as needed. See Chapter&nbsp;4 for additional information about using the -classpath option.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r2c1-t9">
<p>&ndash;mapArgs</p>
</td>
<td align="left" headers="r2c1-t9">
<p>The command to be executed might contain values that are specific to the host running the JavaTest harness and that might not be appropriate for the host that actually runs the command. If this option is given, the agent uses a local mapping file to translate specified string values into replacement values. This is typically used to map filenames from the view on one host to the view on another. See the JavaTest online help for more information.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r3c1-t9">
<p>&ndash;port port-name</p>
</td>
<td align="left" headers="r3c1-t9">
<p>This option specifies the name of the serial port on the system running the JavaTest harness to be used to communicate with a JavaTest Agent that has also been configured to communicate via a serial line. The set of possible names is determined dynamically, and is dependent on the underlying implementation of the javax.comm API. On Solaris, the names are typically ttya, ttyb; on a PC, the names are typically COM1, COM2, COM3 and COM4.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r4c1-t9">
<p>&ndash;tag tag<a id="sthref380" name="sthref380"></a></p>
</td>
<td align="left" headers="r4c1-t9">
<p>This option lets the user specify a string to be used to identify the request on the agent. If not specified, the default value, command-class, is used. It is suggested that the URL of the test be used as the value for this option. In an environment file, this is available as the symbolic name "<a id="sthref381" name="sthref381"></a>$testURL".</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r5c1-t9">
<p>command class</p>
</td>
<td align="left" headers="r5c1-t9">
<p>The name of a command class to be executed by the agent. The class should be on the class path of the agent, and should be appropriate for the agent, depending on the security restrictions imposed on the agent. For example, an agent running as an application might be able to run a ProcessCommand, but an agent running as an applet might not.</p>
</td>
</tr>
<tr align="left" valign="top">
<td align="left" id="r6c1-t9">
<p>command arguments</p>
</td>
<td align="left" headers="r6c1-t9">
<p>The arguments to be passed to the run method of an instance of the command class running on the agent. The arguments can be translated to agent-specific values if the &ndash;mapArgs option is given.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p><span class="bold">Description</span></p>
<p><code>SerialAgentCommand</code> is a facility to execute a command on a JavaTest Agent that has been configured to communicate via a serial line. A JavaTest Agent lets you run tests in a context that might not be able to support all of the JavaTest harness. This might be because the tests are to be run on a machine with limited resources (such as memory), or in a security-restricted environment (such as a browser), or on a newly developed platform on which is not possible to run the JDK.</p>
<p>The port option identifies a serial port on the system running the JavaTest harness, which should be connected to a serial port on the system running the JavaTest Agent. The serial line is accessed via the <code>javax.comm</code> optional package. This is not part of the standard JDK, and must be added to your class path when you start the JavaTest harness.</p>
<p>Commands often contain host-specific arguments, such as filenames or directories. Although the files and directories might be accessible from the agent host (and in general, should be), the paths might be different. For example, <code>/usr/local</code> on a Solaris platform could be mounted as a network drive like <code>H:</code> on a Windows NT platform. When an agent is initialized, it may be given information on how to translate strings from one domain to another. On a per-command basis, the agent can be instructed to translate a command according to the translation tables it is given.</p>
<p>The command to be executed on an agent can be identified with a tag for tracing and debugging purposes. If none is specified, a default identification is used.</p>
<p>Any output written by the command when it is executed by the agent appears as the output of the <code>SerialAgentCommand</code> command itself. If the command is successfully executed by the agent (i.e. the <code>Command</code> object is successfully created and the <code>run</code> method invoked), then the result of <code>SerialAgentCommand</code> is the result of the command executed by the agent. Otherwise, an appropriate error status is returned.</p>
<p><span class="bold">Examples</span></p>
<p>This example is based on the following sample code demonstrating <code>ProcessCommand</code>:</p>
<pre xml:space="preserve" class="oac_no_warn">
  com.sun.javatest.lib.ProcessCommand
     /usr/local/jdk1.6/solaris/bin/javac 
     -classpath /home/juser/classes &ndash;d /home/juser/classes HelloTest.java
</pre>
<p>A command can be made to execute on another machine simply by prefixing it with <code>SerialAgentCommand</code> and any arguments that <code>SerialAgentCommand</code> requires.</p>
<pre xml:space="preserve" class="oac_no_warn">
    compile.java=\
       com.sun.javatest.agent.SerialAgentCommand &ndash;port ttya \
       com.sun.javatest.lib.ProcessCommand \
       /usr/local/jdk1.6/solaris/bin/javac -classpath /home/<span class="italic">juser</span>/classes
       &ndash;d /home/<span class="italic">juser</span>/classes HelloTest.java
</pre>
<p><span class="bold">See Also:</span></p>
<p>All the other standard commands in this appendix. Subject to security restrictions on the agent, they can all be executed remotely by means of <code>SerialAgentCommand</code>.</p>
</div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
<div class="footer">
<hr />
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="100%">
<col width="33%" />
<col width="*" />
<col width="33%" />
<tr>
<td valign="bottom">
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="100">
<col width="*" />
<col width="48%" />
<col width="48%" />
<tr>
<td>&nbsp;</td>
<td align="center"><a href="customizations.htm"><img src="../../dcommon/gifs/leftnav.gif" alt="Previous" /><br />
<span class="icon">Previous</span></a>&nbsp;</td>
<td align="center"><a href="formats.htm"><img src="../../dcommon/gifs/rightnav.gif" alt="Next" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="copyrightlogo"><img class="copyrightlogo" src="../../dcommon/gifs/oracle.gif" alt="Oracle Logo" /><br />
<span class="copyrightlogo">Copyright&nbsp;&copy;&nbsp;2002, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.</span> <a href="../../dcommon/html/cpyr.htm"><br />
<span class="copyrightlogo">Legal Notices</span></a></td>
<td valign="bottom" align="right">
<table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="225">
<tr>
<td>&nbsp;</td>
<td align="center" valign="top"><a href="toc.htm"><img src="../../dcommon/gifs/toc.gif" alt="Go To Table Of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td align="center" valign="top"><a href="index.htm"><img src="../../dcommon/gifs/index.gif" alt="Go To Index" /><br />
<span class="icon">Index</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
</div>
<!-- class="footer" -->
</body>
</html>
