<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- %W% %E% -->
<html lang="en-US"><head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Language" content="en-US">
<title>Release Notes - JavaTest Harness - Version 4.6</title>
<link href="document.css" type="text/css" rel="stylesheet"><script>window.ohcglobal || document.write('<script src="/en/dcommon/js/global.js">\x3C/script>')</script></head>
<body>
<div class="MastheadPane">
  <table class="MastheadTable" summary="This table is for formatting purposes only." width="100%">
      <tbody><tr class="titlebar">
        <th id="c1"><h2 class="DocTitle">JavaTest Harness Release Notes</h2></th>
        <th id="c2" class="smallLogo"><a href="http://www.oracle.com/"><img src="smallOracleLogo.gif" alt="Oracle logo"></a></th>
      </tr>
  </tbody></table>
</div>
<hr class="red">
<div class="MastheadDateBuild">
  <table summary="This table is for formatting purposes only." width="100%">
      <tbody><tr valign="top">
        <th id="c3"><h3 class="SubTitle">Version 4.6</h3></th>
        <th id="c4" rowspan="2" class="smallLogo"><img src="Java_clr_hori_interval.gif" alt="Java coffee cup logo"></th>
      </tr>
      <tr valign="top">
        <td headers="c3" rowspan="2"><h4 class="TitleDate">July 10, 2014</h4></td>
      </tr>
  </tbody></table>
</div>
<div class="BodyStyle"> <a name="top"></a>
  <p class="navtop"><a href="#_maincontent">Skip TOC&nbsp;<img src="downicon.gif" alt="skip TOC"></a></p>
  <h2>Table of Contents</h2>
  <div class="embeddedtoc">
    <p class="level1"><a href="#introduction">Introduction</a></p>
    <p class="level1"><a href="#secnote">Important Security Note</a></p>
    <p class="level1"><a href="#secjava7">Security Exceptions With Java 7 on Windows</a></p>
    <p class="level1"><a href="#fixed_bugs">Bugs Fixed in Release 4.6</a></p>
    <p class="level1"><a href="#known_bugs">Known Bugs in Release 4.6</a></p>
    <p class="level1"><a href="#changes">Changes Since JavaTest Harness, Version 3.2</a></p>
    <p class="level1"><a href="#usage_notes">Usage Notes</a></p>
  </div>
  <a name="introduction"></a><a name="_maincontent"></a>

<h2>Introduction</h2>
  <p>The JavaTest harness Version 4.6 is a maintenance release that fixes issues in many areas. For a detailed report, see <a href="#fixed_bugs">Bugs Fixed in Release 4.6</a>.</p>


  <p class="navtop"><a href="#top">Top&nbsp;<img src="topicon.gif" alt="go to TOC"></a></p>
  <a name="secnote"></a>
  <h2>Important Security Note</h2>
<p>NOTE: Be sure to read the Important Security Information chapter in the online help. </p>

<p>In principle, every file you install poses a potential security risk.
 After installing the harness, you can reduce risk by removing files you
 do not need, and limiting access to the harness files that remain. </p>
<p> To run the harness, you must  minimally have one of two  files: </p>
<ol>
  <li><code>lib/javatest.jar</code>: This archive is the test harness and is an unsigned jar. </li>
  <li><code>lib/jtlite.jar</code>: This archive is the lite harness and is an unsigned jar. </li>
</ol>
<p>You can delete the following installed files and directories if you do not want to use them:</p>
<ul>
  <li><code>linux/</code>, <code>solaris/</code>, <code>win32/</code> directories. These directories contain (in their <code>bin/</code>
 subdirectories ) scripts that launch the test harness. You can delete 
any of them, and launch the test harness with this command: <br>
      <code>$ java -jar lib/javatest.jar</code> <br>
    If you keep the launch scripts, ensure that they do not run with administrative privileges.</li>
  <li><code>doc/</code> directory. This directory (and subdirectories) contains<strong> </strong>Release Notes, user's guides and other documentation. You can delete any of this directory's contents or the entire directory. </li>
  <li><code>lib/</code> directory. You can delete the harness version you do not use, either <code>jtlite.jar</code> or <code>javatest.jar</code>. </li>
  </ul>
<p>A test suite  includes many additional files. Refer to your test suiteâ€™s documentation to see which files are optional. </p>
<h3>Restricting Access to Installed Files </h3>
<p>Limiting access to installed harness files minimizes the chance of 
file corruption. You can restrict acesss to installed harness files by 
setting their permissions to read-only for  the  user who runs the 
harness. Write or execute permission is not required for any installed 
harness file. You can deny all access to people who do not run the 
harness. </p>
<p class="navtop"><a href="#top">Top&nbsp;<img src="topicon.gif" alt="go to TOC"></a></p>
<a name="secjava7"></a>
<h2>Security Exceptions With Java 7 on Windows</h2>
<p>When using Java 7 on Windows, the harness might experience problems 
executing particular parts of the Java 7 APIs because, by default, the 
harness security manager denies access to certain properties. The 
problem might manifest as one of the <a href="#knownexcept">Known Exceptions</a> reproduced below (see <a href="#knownexceptio">java.io.IOException</a> and <a href="#knownexceptsocket">Socket Exception Error</a>). </p>  

<p>There are three ways to workaround the security exceptions:</p>
<ol>
<li><p><b>Use the Java 6 runtime instead.</b> Java 6 is the target execution platform for the harness and is also the minimum Java version supported by the harness.</p></li>
<li><p><b>Set the <code>javatest.security.allowPropertiesAccess</code>  system property to <code>"true"</code> at startup.</b>
 The harness security manager (JavaTestSecurityManager) is automatically
 installed at startup, and its default settings deny access to the 
System Properties object. You can manually allow access to harness 
properties as follows:</p><p> 
</p><p><code>java -Djavatest.security.allowPropertiesAccess=true ...</code></p></li>
<li><p><b>Enable and disable property access programatically.</b> The following code temporarily allows properties access until after the code in the <code>try</code> block is executed.  Beware of race conditions when using this code.</p>
<pre>        SecurityManager sm = System.getSecurityManager();
        JavaTestSecurityManager jtSm = null;
        boolean prev = false;
        if (sm != null &amp;&amp; sm instanceof JavaTestSecurityManager) {
            jtSm = (JavaTestSecurityManager) sm;
            prev = jtSm.setAllowPropertiesAccess(true);
        }
        try {
            // execute exception causing actions here
        } finally {
            if (jtSm != null) {
                jtSm.setAllowPropertiesAccess(prev);
            }
        }
</pre></li></ol>
<a name="knownexcept"></a>
<h3>Known Exceptions</h3>
<p>The following exceptions might be seen if you use the harness with 
the Java 7 platform on the Windows operating system. Use one of the 
above work
arounds to avoid these exceptions.</p>
<a name="knownexceptio"></a>
<h4>java.io.IOException</h4>
<pre>java.io.IOException: The requested operation cannot be performed on a file with
a user-mapped section open
        at sun.nio.ch.FileDispatcherImpl.truncate0(Native Method)
        at sun.nio.ch.FileDispatcherImpl.truncate(FileDispatcherImpl.java:xxx)
        at sun.nio.ch.FileChannelImpl.truncate(FileChannelImpl.java:xxx)
</pre>
<a name="knownexceptsocket"></a>
<h4>Socket Creation Error</h4>
<pre>java.lang.NoClassDefFoundError: Could not initialize class java.net.SocksSocketImpl
	at java.net.ServerSocket.setImpl(ServerSocket.java:xxx)
	at java.net.ServerSocket.&lt;init&gt;(ServerSocket.java:xxx)
	at java.net.ServerSocket.&lt;init&gt;(ServerSocket.java:xxx)
	at com.sun.jck.lib.multijvm.group.TaskManager.run(TaskManager.java:xxx)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:xxx)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:xxx)
	at java.lang.Thread.run(Thread.java:xxx)
or with the following exception:
java.lang.ExceptionInInitializerError
	at java.net.ServerSocket.setImpl(ServerSocket.java:xxx)
	at java.net.ServerSocket.&lt;init&gt;(ServerSocket.java:xxx)
	at java.net.ServerSocket.&lt;init&gt;(ServerSocket.java:xxx)
	at com.sun.jck.lib.multijvm.group.TaskManager.run(TaskManager.java:xxx)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:xxx)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:xxx)
	at java.lang.Thread.run(Thread.java:xxx
)
Caused by: java.lang.SecurityException: Action forbidden by JavaTest Harness: checkPropertiesAccess
	at com.sun.javatest.JavaTestSecurityManager.checkPropertiesAccess(JavaTestSecurityManager.java:xxx)
	at java.lang.System.getProperties(System.java:xxx)
	at java.net.PlainSocketImpl$1.run(PlainSocketImpl.java:xxx)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.PlainSocketImpl.&lt;clinit&gt;(PlainSocketImpl.java:xxx)
</pre>

<p class="navtop"><a href="#top">Top&nbsp;<img src="topicon.gif" alt="go to TOC"></a></p>
  <a name="fixed_bugs"></a>
  <h2>Bugs Fixed in Release 4.6</h2>
  <p>This maintenance release of the JavaTest harness contains fixes for the following bugs:</p>
  <table summary="List of Major Bug Fixes in this Version" border="1">
    <thead>
      <tr>
        <th scope="col">Bug ID</th>
        <th scope="col">Description</th>
      </tr>
    </thead>
    <tbody>
        <tr>
            <td>CODETOOLS-6243792</td>
            <td>agent class loader should implement getResource()</td>
        </tr>
        <tr>
            <td>CODETOOLS-6243817</td>
            <td>tests with empty resources can't pass agentClassLoader</td>
        </tr>
        <tr>
            <td>CODETOOLS-7900902</td>
            <td>Agent.Task.getResourceData incorrectly throws MissingResourceException for empty resource files</td>
        </tr>
        <tr>
            <td>CODETOOLS-7900296</td>
            <td>AgentClassLoader2 should override findResource(String), not getResourceAsStream(String)</td>
        </tr>
        <tr>
            <td>CODETOOLS-7900889<br>
                CODETOOLS-7900282<br>
                CODETOOLS-7900288<br>
                CODETOOLS-7900283<br>
                CODETOOLS-7900284</td>
            <td>various errors in help - typos, text which doesn't match software, broken links</td>
        </tr>
        <tr>
            <td>CODETOOLS-7900883</td>
            <td>usability - ChoiceArrayQuestion in the interview is left-justified on the panel </td>
        </tr>
    </tbody>
  </table>

  <p class="navtop"><a href="#top">Top&nbsp;<img src="topicon.gif" alt="go to TOC"></a></p>
  <a name="known_bugs"></a>
  <h2>Known Problems</h2>
  <p>The following are known issues in the JavaTest 4.6 release.</p>
  <table summary="List of Known Issues" border="1">
    <thead>
      <tr>
        <th scope="col">Bug ID</th>
        <th scope="col">Description</th>
      </tr>
    </thead>
    <tbody>

      <tr>
        <td>CODETOOLS-6434239</td>
        <td>A long name for template/configuration files cannot be fully displayed.</td>
      </tr>
      <tr>
        <td>CODETOOLS-6446655</td>
        <td>There's a keyboard navigation problem in the Tests To Run tree.</td>
      </tr>
      <tr>
        <td>CODETOOLS-6451875</td>
        <td>Log Viewer: Impossible to mark log text when live scrolling mode is ON.</td>
      </tr>
      <tr>
        <td>CODETOOLS-6478125</td>
        <td>Some files remain locked after closing the working directory, preventing the deletion of the directory.</td>
      </tr>
      <tr>
        <td>CODETOOLS-6488302</td>
        <td>Errors while opening write-protected working directory.</td>
      </tr>
      <tr>
        <td>CODETOOLS-6518334</td>
        <td>Report Converter does not generate an error message for an existing report file.</td>
      </tr>
      <tr>
        <td>CODETOOLS-6518375</td>
        <td>Resolving conflicts between two reports in the Report Converter is confusing.</td>
      </tr>
      <tr>
        <td>CODETOOLS-6675884</td>
        <td>Tooltips in PropertiesQuestion are sometimes incorrect.</td>
      </tr>
      <tr>
        <td>CODETOOLS-6796286</td>
        <td>Inconsistent style for editing numeric values in IntQuestion, FloatQuestion and PropertiesQuestion.</td>
      </tr>
    </tbody>
  </table>
  <p class="navtop"><a href="#top">Top&nbsp;<img src="topicon.gif" alt="go to TOC"></a></p>
  <a name="changes"></a>
  <h2>Changes Since JavaTest Harness, Version 3.2</h2>
  <p>The JavaTest harness Version 4.1 release provided basic changes in the following areas:</p>
  <ul>
    <li>Upgraded template support using <code>.jtm</code> file extension.
    </li><li>Upgraded reporting system including an XML report type.
    </li><li>New Report converter tool to merge or convert XML reports.
    </li><li>New Current Template view filter.
    </li><li>New command line option to write a configuration (<code>.jti</code> file).
    </li><li>New command line control of filter used for generating reports.
    </li><li>Updated rendering of some interview question types.
    </li><li>New log viewer system allows browsing of debugging and tracing information.
    </li><li>Additional capabilities in the Folder Pane test lists (a context menu and a second column of information)
  </li></ul>
  <p>Version 4.1.2 was a bug fix release.</p>
  <p>Version 4.1.3 added support for test suites based on JUnit 3.8.x and 4.x and also addressed bug fixes.</p>
  <p>Version 4.1.4 was a bug fix release.</p>
  <p>Version 4.2 was a bug fix release.</p>
  <p>Version 4.2.1 was a maintenance release. It included changes to 
enable the Test Panel to update as a test runs, and extended the Quick 
Pick execution to include Tests to Run settings in configurations. This 
behavior is controlled by preference settings.</p>
<p>Version 4.3 was a maintenance release with the following major features:</p>
<ul>
    <li>The tabbed window style is the only window mode. MDI and SDI window modes were removed.</li>
    <li>GUI colors became partially configurable in the Preferences dialog. Other settings are still available via command line.</li>
    <li>Service startup information was enhanced to show progress.</li>
    <li>Saving of previous desktop is now disabled by default (was enabled previous to this release).</li>
    <li>Usability was improved in the main test tree. Added selection and right-click actions to choose from a context menu.</li></ul>

<p>Version 4.4 was a maintenance release with the following features:</p>
<ul>
    <li><b>Known Failures Lists</b>:&nbsp;&nbsp;
<p>To assist in analyzing/comparing results between test runs, the known
 failures list (KFL) concept has been added to the harness.  It allows 
the user to specify one or more files which contain the names of tests 
that are known to result in a Failed status when executed.  When you 
supply this list of tests to the harness (using the command line or the 
Configuration Editor) the HTML report can generate an additional section
 that can help readers identify which tests have an unexpected result 
(as compared to what expected results the KFL represents).  See the CLI 
and GUI User guides or the online help for more information.</p></li>
    <li><b>Case Sensitive Exclude Lists</b>:&nbsp;&nbsp;
<p>Historically the matching of test names in an exclude list (and 
generally within the harness) is case-insensitive, although case is 
preserved by the harness internally.  Matching can now be case sensitive
 if the <code>javatest.caseSensitiveJtx</code> System property is set to true.  In the future, a programmatic way to do this might be provided.</p>
<p>The general usage is:</p>
    <p><code>java -Djavatest.caseSensitiveJtx=true -jar ...</code></p></li>
</ul>

<p>Version 4.5 was a maintenance release with the following features:</p>
<ul>
    <li>Maximum concurrency increased to 256 (from 50) to support multi-core machines</li>
    <li>Enhanced version string to indicate full or lite version and prepare for module support</li>
    <li>"Lite" version of harness introduced for limited API platforms</li>
    <li>Audit Tool removed</li>
</ul>

  <p class="navtop"><a href="#top">Top&nbsp;<img src="topicon.gif" alt="go to TOC"></a></p>


  <a name="usage_notes"></a>
  <h2>Usage Notes</h2>
  <p>Run JavaTest harness Version 4.6 with Java Platform, Standard Edition (Java SE) 6.0 or later. </p>
   <h3>Printing Pages from the Online Help and Test Reports</h3>
  <p>Because of the method the Java SE platform uses to render fonts, 
when you print a document from the JavaTest user interface, the fonts in
 the printed documents are larger than they are when rendered on the 
screen.</p>
  <p>The JavaTest harness User's Guides have been provided in PDF form 
for your use in printing pages from the documents. While the online help
 viewer supports printing operations, in some cases you may be unable to
 use it to print a specific page. If this occurs, use the PDF version of
 the appropriate User's Guide to print the page. Printing of non-HTML 
report types is not supported. Users are informed of this when they 
attempt to print a non-HTML report type. Support will be added for this 
in a future release.</p>
  <h3>Changing Status Colors in the GUI</h3>
  <p>The JavaTest harness allows the user to specify the status colors 
used in the GUI. See the online help for detailed information about 
changing the default status colors. A limited number of color options is
 available in the GUI Preference dialog.</p>
  <h3>Agent Monitor Tool</h3>
  <p>The Agent Monitor tool may not apply to all test suites, even if 
the test suite uses an agent. See your test suite documentation for 
detailed information about the agent that it uses and its use of the 
Agent Monitor tool.</p>
  <p class="navtop"><a href="#top">Top&nbsp;<img src="topicon.gif" alt="go to TOC"></a></p>
  <hr class="light">
</div>
<p>Copyright Â© 1996, 2014, Oracle and/or its affiliates. All rights reserved.</p>


</body></html>